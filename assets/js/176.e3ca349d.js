(window.webpackJsonp=window.webpackJsonp||[]).push([[176],{493:function(e,n,a){"use strict";a.r(n);var s=a(17),t=Object(s.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"globaleventhandlers-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#globaleventhandlers-接口"}},[e._v("#")]),e._v(" GlobalEventHandlers 接口")]),e._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),a("p",[e._v("指定事件的回调函数，推荐使用的方法是元素的addEventListener方法。")]),e._v(" "),a("div",{staticClass:"language-event line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("div.addEventListener('click', clickHandler, false);\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("除了之外，还有一种方法可以直接指定事件的回调函数。")]),e._v(" "),a("div",{staticClass:"language-event line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("div.onclick = clickHandler;\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[e._v("这个接口是由GlobalEventHandlers接口提供的。它的优点是使用比较方便，缺点是只能为每个事件指定一个回调函数，并且无法指定事件触发的阶段（捕获阶段还是冒泡阶段）。")]),e._v(" "),a("p",[e._v("HTMLElement、Document和Window都继承了这个接口，也就是说，各种 HTML 元素、document对象、window对象上面都可以使用GlobalEventHandlers接口提供的属性。下面就列出这个接口提供的主要的事件属性。")]),e._v(" "),a("h2",{attrs:{id:"globaleventhandlers-onabort"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#globaleventhandlers-onabort"}},[e._v("#")]),e._v(" GlobalEventHandlers.onabort")]),e._v(" "),a("p",[e._v("某个对象的abort事件（停止加载）发生时，就会调用onabort属性指定的回调函数。")]),e._v(" "),a("p",[e._v("各种元素的停止加载事件，到底如何触发，目前并没有统一的规定。因此实际上，这个属性现在一般只用在"),a("code",[e._v("<img>")]),e._v("元素上面。")]),e._v(" "),a("div",{staticClass:"language-event line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// HTML 代码如下\n// <img src=\"example.jpg\" id=\"img\">\nvar img = document.getElementById('img');\nimg.onabort = function () {\n  console.log('image load aborted.');\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("h2",{attrs:{id:"globaleventhandlers-onerror"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#globaleventhandlers-onerror"}},[e._v("#")]),e._v(" GlobalEventHandlers.onerror")]),e._v(" "),a("p",[e._v("error事件发生时，就会调用onerror属性指定的回调函数。")]),e._v(" "),a("p",[e._v("error事件分成两种。")]),e._v(" "),a("p",[e._v("一种是 JavaScript 的运行时错误，这会传到window对象，导致window.onerror()。")]),e._v(" "),a("div",{staticClass:"language-event line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("window.onerror = function (message, source, lineno, colno, error) {\n  // ...\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("window.onerror的处理函数共接受五个参数，含义如下。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("message")]),e._v("：错误信息字符串")]),e._v(" "),a("li",[a("code",[e._v("source")]),e._v("：报错脚本的 URL")]),e._v(" "),a("li",[a("code",[e._v("lineno")]),e._v("：报错的行号，是一个整数")]),e._v(" "),a("li",[a("code",[e._v("colno")]),e._v("：报错的列号，是一个整数")]),e._v(" "),a("li",[a("code",[e._v("error")]),e._v("： 错误对象")])]),e._v(" "),a("p",[e._v("另一种是资源加载错误，比如"),a("code",[e._v("<img>")]),e._v("或"),a("code",[e._v("<script>")]),e._v("加载的资源出现加载错误。这时，Error 对象会传到对应的元素，导致该元素的onerror属性开始执行。")]),e._v(" "),a("div",{staticClass:"language-event line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("element.onerror = function (event) {\n  // ...\n}\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("注意，一般来说，资源的加载错误不会触发window.onerror。")]),e._v(" "),a("h2",{attrs:{id:"globaleventhandlers-onload、globaleventhandlers-onloadstart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#globaleventhandlers-onload、globaleventhandlers-onloadstart"}},[e._v("#")]),e._v(" GlobalEventHandlers.onload、GlobalEventHandlers.onloadstart")]),e._v(" "),a("p",[e._v("元素完成加载时，会触发load事件，执行onload()。它的典型使用场景是window对象和"),a("code",[e._v("<img>")]),e._v("元素。对于window对象来说，只有页面的所有资源加载完成（包括图片、脚本、样式表、字体等所有外部资源），才会触发load事件。")]),e._v(" "),a("p",[e._v("对于"),a("code",[e._v("<img>")]),e._v("和"),a("code",[e._v("<video>")]),e._v("等元素，加载开始时还会触发loadstart事件，导致执行onloadstart。")]),e._v(" "),a("h2",{attrs:{id:"globaleventhandlers-onfocus-globaleventhandlers-onblur"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#globaleventhandlers-onfocus-globaleventhandlers-onblur"}},[e._v("#")]),e._v(" GlobalEventHandlers.onfocus，GlobalEventHandlers.onblur")]),e._v(" "),a("p",[e._v("当前元素获得焦点时，会触发element.onfocus；失去焦点时，会触发element.onblur。")]),e._v(" "),a("div",{staticClass:"language-event line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('element.onfocus = function () {\n  console.log("onfocus event detected!");\n};\nelement.onblur = function () {\n  console.log("onblur event detected!");\n};\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[e._v("注意，如果不是可以接受用户输入的元素，要触发onfocus，该元素必须有tabindex属性。")]),e._v(" "),a("h2",{attrs:{id:"globaleventhandlers-onscroll"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#globaleventhandlers-onscroll"}},[e._v("#")]),e._v(" GlobalEventHandlers.onscroll")]),e._v(" "),a("p",[e._v("页面或元素滚动时，会触发scroll事件，导致执行onscroll()。")]),e._v(" "),a("h2",{attrs:{id:"globaleventhandlers-oncontextmenu-globaleventhandlers-onshow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#globaleventhandlers-oncontextmenu-globaleventhandlers-onshow"}},[e._v("#")]),e._v(" GlobalEventHandlers.oncontextmenu，GlobalEventHandlers.onshow")]),e._v(" "),a("p",[e._v("用户在页面上按下鼠标的右键，会触发contextmenu事件，导致执行oncontextmenu()。如果该属性执行后返回false，就等于禁止了右键菜单。document.oncontextmenu与window.oncontextmenu效果一样。")]),e._v(" "),a("div",{staticClass:"language-event line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("document.oncontextmenu = function () {\n  return false;\n};\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("p",[e._v("上面代码中，oncontextmenu属性执行后返回false，右键菜单就不会出现。")]),e._v(" "),a("p",[e._v("元素的右键菜单显示时，会触发该元素的onshow监听函数。")]),e._v(" "),a("h2",{attrs:{id:"其他的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他的事件属性"}},[e._v("#")]),e._v(" 其他的事件属性")]),e._v(" "),a("h3",{attrs:{id:"_1-鼠标的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-鼠标的事件属性"}},[e._v("#")]),e._v(" 1. 鼠标的事件属性")]),e._v(" "),a("ul",[a("li",[e._v("onclick")]),e._v(" "),a("li",[e._v("ondblclick")]),e._v(" "),a("li",[e._v("onmousedown")]),e._v(" "),a("li",[e._v("onmouseenter")]),e._v(" "),a("li",[e._v("onmouseleave")]),e._v(" "),a("li",[e._v("onmousemove")]),e._v(" "),a("li",[e._v("onmouseout")]),e._v(" "),a("li",[e._v("onmouseover")]),e._v(" "),a("li",[e._v("onmouseup")]),e._v(" "),a("li",[e._v("onwheel")])]),e._v(" "),a("h3",{attrs:{id:"_2-键盘的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-键盘的事件属性"}},[e._v("#")]),e._v(" 2. 键盘的事件属性")]),e._v(" "),a("ul",[a("li",[e._v("onkeydown")]),e._v(" "),a("li",[e._v("onkeypress")]),e._v(" "),a("li",[e._v("onkeyup")])]),e._v(" "),a("h3",{attrs:{id:"_3-焦点的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-焦点的事件属性"}},[e._v("#")]),e._v(" 3. 焦点的事件属性")]),e._v(" "),a("ul",[a("li",[e._v("onblur")]),e._v(" "),a("li",[e._v("onfocus")])]),e._v(" "),a("h3",{attrs:{id:"_4-表单的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-表单的事件属性"}},[e._v("#")]),e._v(" 4. 表单的事件属性")]),e._v(" "),a("ul",[a("li",[e._v("oninput")]),e._v(" "),a("li",[e._v("onchange")]),e._v(" "),a("li",[e._v("onsubmit")]),e._v(" "),a("li",[e._v("onreset")]),e._v(" "),a("li",[e._v("oninvalid")]),e._v(" "),a("li",[e._v("onselect")])]),e._v(" "),a("h3",{attrs:{id:"_5-触摸的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-触摸的事件属性"}},[e._v("#")]),e._v(" 5. 触摸的事件属性")]),e._v(" "),a("ul",[a("li",[e._v("ontouchcancel")]),e._v(" "),a("li",[e._v("ontouchend")]),e._v(" "),a("li",[e._v("ontouchmove")]),e._v(" "),a("li",[e._v("ontouchstart")])]),e._v(" "),a("p",[e._v("拖动的事件属性分成两类：一类与被拖动元素相关，另一类与接收被拖动元素的容器元素相关。")]),e._v(" "),a("h3",{attrs:{id:"_6-被拖动元素的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-被拖动元素的事件属性"}},[e._v("#")]),e._v(" 6. 被拖动元素的事件属性")]),e._v(" "),a("ul",[a("li",[e._v("ondragstart：拖动开始")]),e._v(" "),a("li",[e._v("ondrag：拖动过程中，每隔几百毫秒触发一次")]),e._v(" "),a("li",[e._v("ondragend：拖动结束")])]),e._v(" "),a("h3",{attrs:{id:"_7-接收被拖动元素的容器元素的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-接收被拖动元素的容器元素的事件属性"}},[e._v("#")]),e._v(" 7. 接收被拖动元素的容器元素的事件属性")]),e._v(" "),a("ul",[a("li",[e._v("ondragenter：被拖动元素进入容器元素。")]),e._v(" "),a("li",[e._v("ondragleave：被拖动元素离开容器元素。")]),e._v(" "),a("li",[e._v("ondragover：被拖动元素在容器元素上方，每隔几百毫秒触发一次。")]),e._v(" "),a("li",[e._v("ondrop：松开鼠标后，被拖动元素放入容器元素。")])]),e._v(" "),a("h3",{attrs:{id:"_8-dialog-对话框元素的事件属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-dialog-对话框元素的事件属性"}},[e._v("#")]),e._v(" 8. "),a("code",[e._v("<dialog>")]),e._v("对话框元素的事件属性")]),e._v(" "),a("ul",[a("li",[e._v("oncancel")]),e._v(" "),a("li",[e._v("onclose")])])])}),[],!1,null,null,null);n.default=t.exports}}]);