(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{455:function(s,e,n){"use strict";n.r(e);var a=n(17),t=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"mutation-observer-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutation-observer-api"}},[s._v("#")]),s._v(" Mutation Observer API")]),s._v(" "),n("h2",{attrs:{id:"概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),n("p",[s._v("Mutation Observer API 用来监视 DOM 变动。DOM 的任何变动，比如节点的增减、属性的变动、文本内容的变动，这个 API 都可以得到通知。")]),s._v(" "),n("p",[s._v("概念上，它很接近事件，可以理解为 DOM 发生变动就会触发 Mutation Observer 事件。但是，它与事件有一个本质不同：事件是同步触发，也就是说，DOM 的变动立刻会触发相应的事件；Mutation Observer 则是异步触发，DOM 的变动并不会马上触发，而是要等到当前所有 DOM 操作都结束才触发。")]),s._v(" "),n("p",[s._v("这样设计是为了应付 DOM 变动频繁的特点。举例来说，如果文档中连续插入1000个")]),n("p",[s._v("元素，就会连续触发1000个插入事件，执行每个事件的回调函数，这很可能造成浏览器的卡顿；而 Mutation Observer 完全不同，只在1000个段落都插入结束后才会触发，而且只触发一次。")]),s._v(" "),n("p",[s._v("Mutation Observer 有以下特点。")]),s._v(" "),n("ul",[n("li",[s._v("它等待所有脚本任务完成后，才会运行（即异步触发方式）。")]),s._v(" "),n("li",[s._v("它把 DOM 变动记录封装成一个数组进行处理，而不是一条条个别处理 DOM 变动。")]),s._v(" "),n("li",[s._v("它既可以观察 DOM 的所有类型变动，也可以指定只观察某一类变动。")])]),s._v(" "),n("h2",{attrs:{id:"mutationobserver-构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver-构造函数"}},[s._v("#")]),s._v(" MutationObserver 构造函数")]),s._v(" "),n("p",[s._v("使用时，首先使用MutationObserver构造函数，新建一个观察器实例，同时指定这个实例的回调函数。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var observer = new MutationObserver(callback);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("上面代码中的回调函数，会在每次 DOM 变动后调用。该回调函数接受两个参数，第一个是变动数组，第二个是观察器实例，下面是一个例子。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var observer = new MutationObserver(function (mutations, observer) {\n  mutations.forEach(function(mutation) {\n    console.log(mutation);\n  });\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"mutationobserver-的实例方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutationobserver-的实例方法"}},[s._v("#")]),s._v(" MutationObserver 的实例方法")]),s._v(" "),n("h3",{attrs:{id:"_1-observe"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-observe"}},[s._v("#")]),s._v(" 1. observe()")]),s._v(" "),n("p",[s._v("observe方法用来启动监听，它接受两个参数。")]),s._v(" "),n("ul",[n("li",[s._v("第一个参数：所要观察的 DOM 节点")]),s._v(" "),n("li",[s._v("第二个参数：一个配置对象，指定所要观察的特定变动")])]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var article = document.querySelector('article');\n\nvar  options = {\n  'childList': true,\n  'attributes':true\n} ;\n\nobserver.observe(article, options);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("上面代码中，observe方法接受两个参数，第一个是所要观察的DOM元素是article，第二个是所要观察的变动类型（子节点变动和属性变动）。")]),s._v(" "),n("p",[s._v("观察器所能观察的 DOM 变动类型（即上面代码的options对象），有以下几种。")]),s._v(" "),n("ul",[n("li",[s._v("childList：子节点的变动（指新增，删除或者更改）。")]),s._v(" "),n("li",[s._v("attributes：属性的变动。")]),s._v(" "),n("li",[s._v("characterData：节点内容或节点文本的变动。")])]),s._v(" "),n("p",[s._v("想要观察哪一种变动类型，就在option对象中指定它的值为true。需要注意的是，必须同时指定childList、attributes和characterData中的一种或多种，若未均指定将报错。")]),s._v(" "),n("p",[s._v("除了变动类型，options对象还可以设定以下属性：")]),s._v(" "),n("ul",[n("li",[s._v("subtree：布尔值，表示是否将该观察器应用于该节点的所有后代节点。")]),s._v(" "),n("li",[s._v("attributeOldValue：布尔值，表示观察attributes变动时，是否需要记录变动前的属性值。")]),s._v(" "),n("li",[s._v("characterDataOldValue：布尔值，表示观察characterData变动时，是否需要记录变动前的值。")]),s._v(" "),n("li",[s._v("attributeFilter：数组，表示需要观察的特定属性（比如['class','src']）。")])]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 开始监听文档根节点（即<html>标签）的变动\nmutationObserver.observe(document.documentElement, {\n  attributes: true,\n  characterData: true,\n  childList: true,\n  subtree: true,\n  attributeOldValue: true,\n  characterDataOldValue: true\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("对一个节点添加观察器，就像使用addEventListener方法一样，多次添加同一个观察器是无效的，回调函数依然只会触发一次。但是，如果指定不同的options对象，就会被当作两个不同的观察器。")]),s._v(" "),n("p",[s._v("下面的例子是观察新增的子节点。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var insertedNodes = [];\nvar observer = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    for (var i = 0; i < mutation.addedNodes.length; i++) {\n      insertedNodes.push(mutation.addedNodes[i]);\n    }\n  });\n  console.log(insertedNodes);\n});\nobserver.observe(document, { childList: true, subtree: true });\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"_2-disconnect-takerecords"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-disconnect-takerecords"}},[s._v("#")]),s._v(" 2. disconnect()，takeRecords（）")]),s._v(" "),n("p",[s._v("disconnect方法用来停止观察。调用该方法后，DOM 再发生变动，也不会触发观察器。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("observer.disconnect();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("takeRecords方法用来清除变动记录，即不再处理未处理的变动。该方法返回变动记录的数组。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("observer.takeRecords();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("下面是一个例子。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 保存所有没有被观察器处理的变动\nvar changes = mutationObserver.takeRecords();\n\n// 停止观察\nmutationObserver.disconnect();\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"mutationrecord-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mutationrecord-对象"}},[s._v("#")]),s._v(" MutationRecord 对象")]),s._v(" "),n("p",[s._v("DOM 每次发生变化，就会生成一条变动记录（MutationRecord 实例）。该实例包含了与变动相关的所有信息。Mutation Observer 处理的就是一个个MutationRecord实例所组成的数组。")]),s._v(" "),n("p",[s._v("MutationRecord对象包含了DOM的相关信息，有如下属性：")]),s._v(" "),n("ul",[n("li",[s._v("type：观察的变动类型（attributes、characterData或者childList）。")]),s._v(" "),n("li",[s._v("target：发生变动的DOM节点。")]),s._v(" "),n("li",[s._v("addedNodes：新增的DOM节点。")]),s._v(" "),n("li",[s._v("removedNodes：删除的DOM节点。")]),s._v(" "),n("li",[s._v("previousSibling：前一个同级节点，如果没有则返回null。")]),s._v(" "),n("li",[s._v("nextSibling：下一个同级节点，如果没有则返回null。")]),s._v(" "),n("li",[s._v("attributeName：发生变动的属性。如果设置了attributeFilter，则只返回预先指定的属性。")]),s._v(" "),n("li",[s._v("oldValue：变动前的值。这个属性只对attribute和characterData变动有效，如果发生childList变动，则返回null。")])]),s._v(" "),n("h2",{attrs:{id:"应用示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#应用示例"}},[s._v("#")]),s._v(" 应用示例")]),s._v(" "),n("h3",{attrs:{id:"_1-子元素的变动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-子元素的变动"}},[s._v("#")]),s._v(" 1. 子元素的变动")]),s._v(" "),n("p",[s._v("下面的例子说明如何读取变动记录。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var callback = function (records){\n  records.map(function(record){\n    console.log('Mutation type: ' + record.type);\n    console.log('Mutation target: ' + record.target);\n  });\n};\n\nvar mo = new MutationObserver(callback);\n\nvar option = {\n  'childList': true,\n  'subtree': true\n};\n\nmo.observe(document.body, option);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("上面代码的观察器，观察"),n("code",[s._v("<body>")]),s._v("的所有下级节点（childList表示观察子节点，subtree表示观察后代节点）的变动。回调函数会在控制台显示所有变动的类型和目标节点。")]),s._v(" "),n("h3",{attrs:{id:"_2-属性的变动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-属性的变动"}},[s._v("#")]),s._v(" 2. 属性的变动")]),s._v(" "),n("p",[s._v("下面的例子说明如何追踪属性的变动。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var callback = function (records) {\n  records.map(function (record) {\n    console.log('Previous attribute value: ' + record.oldValue);\n  });\n};\n\nvar mo = new MutationObserver(callback);\n\nvar element = document.getElementById('#my_element');\n\nvar options = {\n  'attributes': true,\n  'attributeOldValue': true\n}\n\nmo.observe(element, options);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("上面代码先设定追踪属性变动（'attributes': true），然后设定记录变动前的值。实际发生变动时，会将变动前的值显示在控制台。")]),s._v(" "),n("h3",{attrs:{id:"_3-取代-domcontentloaded-事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-取代-domcontentloaded-事件"}},[s._v("#")]),s._v(" 3. 取代 DOMContentLoaded 事件")]),s._v(" "),n("p",[s._v("网页加载的时候，DOM 节点的生成会产生变动记录，因此只要观察 DOM 的变动，就能在第一时间触发相关事件，也就没有必要使用DOMContentLoaded事件。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var observer = new MutationObserver(callback);\nobserver.observe(document.documentElement, {\n  childList: true,\n  subtree: true\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("上面代码中，监听document.documentElement（即网页的"),n("code",[s._v("<html>")]),s._v("HTML 节点）的子节点的变动，subtree属性指定监听还包括后代节点。因此，任意一个网页元素一旦生成，就能立刻被监听到。")]),s._v(" "),n("p",[s._v("下面的代码，使用MutationObserver对象封装一个监听 DOM 生成的函数。")]),s._v(" "),n("div",{staticClass:"language-dom line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("(function(win){\n  'use strict';\n\n  var listeners = [];\n  var doc = win.document;\n  var MutationObserver = win.MutationObserver || win.WebKitMutationObserver;\n  var observer;\n\n  function ready(selector, fn){\n    // 储存选择器和回调函数\n    listeners.push({\n      selector: selector,\n      fn: fn\n    });\n    if(!observer){\n      // 监听document变化\n      observer = new MutationObserver(check);\n      observer.observe(doc.documentElement, {\n        childList: true,\n        subtree: true\n      });\n    }\n    // 检查该节点是否已经在DOM中\n    check();\n  }\n\n  function check(){\n  // 检查是否匹配已储存的节点\n    for(var i = 0; i < listeners.length; i++){\n      var listener = listeners[i];\n      // 检查指定节点是否有匹配\n      var elements = doc.querySelectorAll(listener.selector);\n      for(var j = 0; j < elements.length; j++){\n        var element = elements[j];\n        // 确保回调函数只会对该元素调用一次\n        if(!element.ready){\n          element.ready = true;\n          // 对该节点调用回调函数\n          listener.fn.call(element, element);\n        }\n      }\n    }\n  }\n\n  // 对外暴露ready\n  win.ready = ready;\n\n})(this);\n\n// 使用方法\nready('.foo', function(element){\n  // ...\n});\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);