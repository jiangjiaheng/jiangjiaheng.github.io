(window.webpackJsonp=window.webpackJsonp||[]).push([[192],{507:function(s,e,a){"use strict";a.r(e);var t=a(17),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"object对象的相关方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object对象的相关方法"}},[s._v("#")]),s._v(" Object对象的相关方法")]),s._v(" "),a("h2",{attrs:{id:"静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[s._v("#")]),s._v(" 静态方法")]),s._v(" "),a("h3",{attrs:{id:"_1-getprototypeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-getprototypeof"}},[s._v("#")]),s._v(" 1. getPrototypeOf")]),s._v(" "),a("p",[s._v("Object.getPrototypeOf方法返回参数对象的原型。这是获取原型对象的标准方法。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var F = function () {};\nvar f = new F();\nObject.getPrototypeOf(f) === F.prototype // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("下面是几种特殊对象的原型。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 空对象的原型是 Object.prototype\nObject.getPrototypeOf({}) === Object.prototype // true\n\n// Object.prototype 的原型是 null\nObject.getPrototypeOf(Object.prototype) === null // true\n\n// 函数的原型是 Function.prototype\nfunction f() {}\nObject.getPrototypeOf(f) === Function.prototype // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h3",{attrs:{id:"_2-setprototypeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-setprototypeof"}},[s._v("#")]),s._v(" 2. setPrototypeOf")]),s._v(" "),a("p",[s._v("Object.setPrototypeOf方法为参数对象设置原型，返回该参数对象。它接受两个参数，第一个是现有对象，第二个是原型对象。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = {};\nvar b = {x: 1};\nObject.setPrototypeOf(a, b);\n\nObject.getPrototypeOf(a) === b // true\na.x // 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("new命令可以使用Object.setPrototypeOf方法模拟。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var F = function () {\n  this.foo = 'bar';\n};\n\nvar f = new F();\n// 等同于\nvar f = Object.setPrototypeOf({}, F.prototype);\nF.call(f);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"_3-create"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-create"}},[s._v("#")]),s._v(" 3. create")]),s._v(" "),a("p",[s._v("JavaScript 提供了Object.create方法，用来满足这种需求。该方法接受一个对象作为参数，然后以它为原型，返回一个实例对象。该实例完全继承原型对象的属性。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 原型对象\nvar A = {\n  print: function () {\n    console.log('hello');\n  }\n};\n\n// 实例对象\nvar B = Object.create(A);\n\nObject.getPrototypeOf(B) === A // true\nB.print() // hello\nB.print === A.print // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("下面三种方式生成的新对象是等价的。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj1 = Object.create({});\nvar obj2 = Object.create(Object.prototype);\nvar obj3 = new Object();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果想要生成一个不继承任何属性（比如没有toString和valueOf方法）的对象，可以将Object.create的参数设为null。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = Object.create(null);\n\nobj.valueOf()\n// TypeError: Object [object Object] has no method 'valueOf'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("使用Object.create方法的时候，必须提供对象原型，即参数不能为空，或者不是对象，否则会报错。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.create()\n// TypeError: Object prototype may only be an Object or null\nObject.create(123)\n// TypeError: Object prototype may only be an Object or null\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("Object.create方法生成的新对象，动态继承了原型。在原型上添加或修改任何方法，会立刻反映在新对象之上。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj1 = { p: 1 };\nvar obj2 = Object.create(obj1);\n\nobj1.p = 2;\nobj2.p // 2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("除了对象的原型，Object.create方法还可以接受第二个参数。该参数是一个属性描述对象，它所描述的对象属性，会添加到实例对象，作为该对象自身的属性。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = Object.create({}, {\n  p1: {\n    value: 123,\n    enumerable: true,\n    configurable: true,\n    writable: true,\n  },\n  p2: {\n    value: 'abc',\n    enumerable: true,\n    configurable: true,\n    writable: true,\n  }\n});\n\n// 等同于\nvar obj = Object.create({});\nobj.p1 = 123;\nobj.p2 = 'abc';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("Object.create方法生成的对象，继承了它的原型对象的构造函数。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function A() {}\nvar a = new A();\nvar b = Object.create(a);\n\nb.constructor === A // true\nb instanceof A // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"_4-getownpropertynames"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-getownpropertynames"}},[s._v("#")]),s._v(" 4. getOwnPropertyNames")]),s._v(" "),a("p",[s._v("Object.getOwnPropertyNames方法返回一个数组，成员是参数对象本身的所有属性的键名，不包含继承的属性键名。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Object.getOwnPropertyNames(Date)\n// ["parse", "arguments", "UTC", "caller", "name", "prototype", "now", "length"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码中，Object.getOwnPropertyNames方法返回Date所有自身的属性名。")]),s._v(" "),a("p",[s._v("对象本身的属性之中，有的是可以遍历的（enumerable），有的是不可以遍历的。Object.getOwnPropertyNames方法返回所有键名，不管是否可以遍历。只获取那些可以遍历的属性，使用Object.keys方法。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.keys(Date) // []\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面代码表明，Date对象所有自身的属性，都是不可以遍历的。")]),s._v(" "),a("h2",{attrs:{id:"实例方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),a("h3",{attrs:{id:"_1-isprototypeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-isprototypeof"}},[s._v("#")]),s._v(" 1. isPrototypeOf")]),s._v(" "),a("p",[s._v("实例对象的isPrototypeOf方法，用来判断该对象是否为参数对象的原型。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var o1 = {};\nvar o2 = Object.create(o1);\nvar o3 = Object.create(o2);\n\no2.isPrototypeOf(o3) // true\no1.isPrototypeOf(o3) // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，o1和o2都是o3的原型。这表明只要实例对象处在参数对象的原型链上，isPrototypeOf方法都返回true。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Object.prototype.isPrototypeOf({}) // true\nObject.prototype.isPrototypeOf([]) // true\nObject.prototype.isPrototypeOf(/xyz/) // true\nObject.prototype.isPrototypeOf(Object.create(null)) // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_2-proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-proto"}},[s._v("#")]),s._v(" 2. "),a("em",[s._v("proto")])]),s._v(" "),a("p",[s._v("实例对象的__proto__属性（前后各两个下划线），返回该对象的原型。该属性可读写。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = {};\nvar p = {};\n\nobj.__proto__ = p;\nObject.getPrototypeOf(obj) === p // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("原型链可以用__proto__很直观地表示。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var A = {\n  name: '张三'\n};\nvar B = {\n  name: '李四'\n};\n\nvar proto = {\n  print: function () {\n    console.log(this.name);\n  }\n};\n\nA.__proto__ = proto;\nB.__proto__ = proto;\n\nA.print() // 张三\nB.print() // 李四\n\nA.print === B.print // true\nA.print === proto.print // true\nB.print === proto.print // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h3",{attrs:{id:"_3-hasownproperty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-hasownproperty"}},[s._v("#")]),s._v(" 3. hasOwnProperty")]),s._v(" "),a("p",[s._v("对象实例的hasOwnProperty方法返回一个布尔值，用于判断某个属性定义在对象自身，还是定义在原型链上。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Date.hasOwnProperty('length') // true\nDate.hasOwnProperty('toString') // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("上面代码表明，Date.length（构造函数Date可以接受多少个参数）是Date自身的属性，Date.toString是继承的属性。")]),s._v(" "),a("p",[s._v("另外，hasOwnProperty方法是 JavaScript 之中唯一一个处理对象属性时，不会遍历原型链的方法。")]),s._v(" "),a("h2",{attrs:{id:"获取原型对象方法的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取原型对象方法的比较"}},[s._v("#")]),s._v(" 获取原型对象方法的比较")]),s._v(" "),a("p",[s._v("如前所述，__proto__属性指向当前对象的原型对象，即构造函数的prototype属性。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var obj = new Object();\n\nobj.__proto__ === Object.prototype\n// true\nobj.__proto__ === obj.constructor.prototype\n// true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("因此，获取实例对象obj的原型对象，有三种方法。")]),s._v(" "),a("ul",[a("li",[s._v("obj."),a("strong",[s._v("proto")])]),s._v(" "),a("li",[s._v("obj.constructor.prototype")]),s._v(" "),a("li",[s._v("Object.getPrototypeOf(obj)")])]),s._v(" "),a("p",[s._v("上面三种方法之中，前两种都不是很可靠。__proto__属性只有浏览器才需要部署，其他环境可以不部署。而obj.constructor.prototype在手动改变原型对象时，可能会失效。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var P = function () {};\nvar p = new P();\n\nvar C = function () {};\nC.prototype = p;\nvar c = new C();\n\nc.constructor.prototype === p // false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("上面代码中，构造函数C的原型对象被改成了p，但是实例对象的c.constructor.prototype却没有指向p。所以，在改变原型对象时，一般要同时设置constructor属性。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("C.prototype = p;\nC.prototype.constructor = C;\n\nvar c = new C();\nc.constructor.prototype === p // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("因此，推荐使用第三种Object.getPrototypeOf方法，获取原型对象。")]),s._v(" "),a("h2",{attrs:{id:"in运算符和for-in循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#in运算符和for-in循环"}},[s._v("#")]),s._v(" in运算符和for……in循环")]),s._v(" "),a("p",[s._v("in运算符返回一个布尔值，表示一个对象是否具有某个属性。它不区分该属性是对象自身的属性，还是继承的属性。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("'length' in Date // true\n'toString' in Date // true\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("获得对象的所有可遍历属性（不管是自身的还是继承的），可以使用for...in循环。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var o1 = { p1: 123 };\n\nvar o2 = Object.create(o1, {\n  p2: { value: "abc", enumerable: true }\n});\n\nfor (p in o2) {\n  console.info(p);\n}\n// p2\n// p1\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("为了在for...in循环中获得对象自身的属性，可以采用hasOwnProperty方法判断一下。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for ( var name in object ) {\n  if ( object.hasOwnProperty(name) ) {\n    /* loop code */\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("获得对象的所有属性（不管是自身的还是继承的，也不管是否可枚举），可以使用下面的函数。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function inheritedPropertyNames(obj) {\n  var props = {};\n  while(obj) {\n    Object.getOwnPropertyNames(obj).forEach(function(p) {\n      props[p] = true;\n    });\n    obj = Object.getPrototypeOf(obj);\n  }\n  return Object.getOwnPropertyNames(props);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("下面是一个例子，列出Date对象的所有属性。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('inheritedPropertyNames(Date)\n// [\n//  "caller",\n//  "constructor",\n//  "toString",\n//  "UTC",\n//  ...\n// ]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"对象的拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象的拷贝"}},[s._v("#")]),s._v(" 对象的拷贝")]),s._v(" "),a("p",[s._v("如果要拷贝一个对象，需要做到下面两件事情。")]),s._v(" "),a("ul",[a("li",[s._v("确保拷贝后的对象，与原对象具有同样的原型。")]),s._v(" "),a("li",[s._v("确保拷贝后的对象，与原对象具有同样的实例属性。")])]),s._v(" "),a("p",[s._v("下面就是根据上面两点，实现的对象拷贝函数。")]),s._v(" "),a("div",{staticClass:"language-obj line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function copyObject(orig) {\n  return Object.create(\n    Object.getPrototypeOf(orig),\n    Object.getOwnPropertyDescriptors(orig)\n  );\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])])}),[],!1,null,null,null);e.default=n.exports}}]);