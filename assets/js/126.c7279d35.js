(window.webpackJsonp=window.webpackJsonp||[]).push([[126],{443:function(s,t,a){"use strict";a.r(t);var e=a(17),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"history-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#history-对象"}},[s._v("#")]),s._v(" History 对象")]),s._v(" "),a("h2",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("window.history属性指向 History 对象，它表示当前窗口的浏览历史。")]),s._v(" "),a("p",[s._v("History 对象保存了当前窗口访问过的所有页面网址。下面代码表示当前窗口一共访问过3个网址。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("window.history.length // 3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("由于安全原因，浏览器不允许脚本读取这些地址，但是允许在地址之间导航。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 后退到前一个网址\nhistory.back()\n\n// 等同于\nhistory.go(-1)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("浏览器工具栏的“前进”和“后退”按钮，其实就是对 History 对象进行操作。")]),s._v(" "),a("h2",{attrs:{id:"属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[s._v("#")]),s._v(" 属性")]),s._v(" "),a("p",[s._v("History 对象主要有两个属性。")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("History.length")]),s._v("：当前窗口访问过的网址数量（包括当前网页）")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("History.state")]),s._v("：History 堆栈最上层的状态值（详见下文）")])])]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 当前窗口访问过多少个网页\nwindow.history.length // 1\n\n// History 对象的当前状态\n// 通常是 undefined，即未设置\nwindow.history.state // undefined\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[s._v("#")]),s._v(" 方法")]),s._v(" "),a("h3",{attrs:{id:"_1-history-back-、history-forward-、history-go"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-history-back-、history-forward-、history-go"}},[s._v("#")]),s._v(" 1. History.back()、History.forward()、History.go()")]),s._v(" "),a("p",[s._v("这三个方法用于在历史之中移动。")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("History.back()")]),s._v("：移动到上一个网址，等同于点击浏览器的后退键。对于第一个访问的网址，该方法无效果。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("History.forward()")]),s._v("：移动到下一个网址，等同于点击浏览器的前进键。对于最后一个访问的网址，该方法无效果。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("History.go()")]),s._v("：接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址，比如go(1)相当于forward()，go(-1)相当于back()。如果参数超过实际存在的网址范围，该方法无效果；如果不指定参数，默认参数为0，相当于刷新当前页面。")])])]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("history.back();\nhistory.forward();\nhistory.go(-2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("history.go(0)相当于刷新当前页面。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("history.go(0); // 刷新当前页面\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("注意，移动到以前访问过的页面时，页面通常是从浏览器缓存之中加载，而不是重新要求服务器发送新的网页。")]),s._v(" "),a("h3",{attrs:{id:"_2-history-pushstate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-history-pushstate"}},[s._v("#")]),s._v(" 2. History.pushState()")]),s._v(" "),a("p",[s._v("History.pushState()方法用于在历史中添加一条记录。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("window.history.pushState(state, title, url)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("该方法接受三个参数，依次为：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("state")]),s._v("：一个与添加的记录相关联的状态对象，主要用于popstate事件。该事件触发时，该对象会传入回调函数。也就是说，浏览器会将这个对象序列化以后保留在本地，重新载入这个页面的时候，可以拿到这个对象。如果不需要这个对象，此处可以填null。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("title")]),s._v("：新页面的标题。但是，现在所有浏览器都忽视这个参数，所以这里可以填空字符串。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("url")]),s._v("：新的网址，必须与当前页面处在同一个域。浏览器的地址栏将显示这个网址。")])])]),s._v(" "),a("p",[s._v("假定当前网址是 "),a("code",[s._v("example.com/1.html")]),s._v("，使用pushState()方法在浏览记录（History 对象）中添加一个新记录。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var stateObj = { foo: 'bar' };\nhistory.pushState(stateObj, 'page 2', '2.html');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("添加新记录后，浏览器地址栏立刻显示"),a("code",[s._v("example.com/2.html")]),s._v("，但并不会跳转到2.html，甚至也不会检查2.html是否存在，它只是成为浏览历史中的最新记录。这时，在地址栏输入一个新的地址(比如访问"),a("code",[s._v("google.com")]),s._v(")，然后点击了倒退按钮，页面的 URL 将显示2.html；你再点击一次倒退按钮，URL 将显示1.html。")]),s._v(" "),a("p",[s._v("总之，pushState()方法不会触发页面刷新，只是导致 History 对象发生变化，地址栏会有反应。")]),s._v(" "),a("p",[s._v("使用该方法之后，就可以用History.state属性读出状态对象。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var stateObj = { foo: 'bar' };\nhistory.pushState(stateObj, 'page 2', '2.html');\nhistory.state // {foo: \"bar\"}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果pushState的 URL 参数设置了一个新的锚点值（即hash），并不会触发hashchange事件。反过来，如果 URL 的锚点值变了，则会在 History 对象创建一条浏览记录。")]),s._v(" "),a("p",[s._v("如果pushState()方法设置了一个跨域网址，则会报错。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 报错\n// 当前网址为 http://example.com\nhistory.pushState(null, '', 'https://twitter.com/hello');\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("上面代码中，pushState想要插入一个跨域的网址，导致报错。这样设计的目的是，防止恶意代码让用户以为他们是在另一个网站上，因为这个方法不会导致页面跳转。")]),s._v(" "),a("h3",{attrs:{id:"_3-history-replacestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-history-replacestate"}},[s._v("#")]),s._v(" 3. History.replaceState()")]),s._v(" "),a("p",[s._v("History.replaceState()方法用来修改 History 对象的当前记录，其他都与pushState()方法一模一样。")]),s._v(" "),a("p",[s._v("假定当前网页是"),a("code",[s._v("example.com/example.html")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("history.pushState({page: 1}, 'title 1', '?page=1')\n// URL 显示为 http://example.com/example.html?page=1\n\nhistory.pushState({page: 2}, 'title 2', '?page=2');\n// URL 显示为 http://example.com/example.html?page=2\n\nhistory.replaceState({page: 3}, 'title 3', '?page=3');\n// URL 显示为 http://example.com/example.html?page=3\n\nhistory.back()\n// URL 显示为 http://example.com/example.html?page=1\n\nhistory.back()\n// URL 显示为 http://example.com/example.html\n\nhistory.go(2)\n// URL 显示为 http://example.com/example.html?page=3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"popstate-事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#popstate-事件"}},[s._v("#")]),s._v(" popstate 事件")]),s._v(" "),a("p",[s._v("每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件。")]),s._v(" "),a("p",[s._v("注意，仅仅调用pushState()方法或replaceState()方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用History.back()、History.forward()、History.go()方法时才会触发。另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。")]),s._v(" "),a("p",[s._v("使用的时候，可以为popstate事件指定回调函数。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("window.onpopstate = function (event) {\n  console.log('location: ' + document.location);\n  console.log('state: ' + JSON.stringify(event.state));\n};\n\n// 或者\nwindow.addEventListener('popstate', function(event) {\n  console.log('location: ' + document.location);\n  console.log('state: ' + JSON.stringify(event.state));\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("回调函数的参数是一个event事件对象，它的state属性指向pushState和replaceState方法为当前 URL 所提供的状态对象（即这两个方法的第一个参数）。上面代码中的event.state，就是通过pushState和replaceState方法，为当前 URL 绑定的state对象。")]),s._v(" "),a("p",[s._v("这个state对象也可以直接通过history对象读取。")]),s._v(" "),a("div",{staticClass:"language-bom line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var currentState = history.state;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("注意，页面第一次加载的时候，浏览器不会触发popstate事件。")])])}),[],!1,null,null,null);t.default=n.exports}}]);