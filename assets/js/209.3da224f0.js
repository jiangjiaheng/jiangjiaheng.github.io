(window.webpackJsonp=window.webpackJsonp||[]).push([[209],{525:function(s,a,e){"use strict";e.r(a);var t=e(17),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"正则的扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#正则的扩展"}},[s._v("#")]),s._v(" 正则的扩展")]),s._v(" "),e("h2",{attrs:{id:"构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[s._v("#")]),s._v(" 构造函数")]),s._v(" "),e("p",[s._v("在 ES6 中，RegExp构造函数的参数有三种情况。")]),s._v(" "),e("p",[s._v("第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var regex = new RegExp('xyz', 'i');\n// 等价于\nvar regex = /xyz/i;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var regex = new RegExp(/xyz/i);\n// 等价于\nvar regex = /xyz/i;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("第三种情况，如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。")]),s._v(" "),e("div",{staticClass:"language-str line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("new RegExp(/abc/ig, 'i').flags\n// \"i\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"u修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#u修饰符"}},[s._v("#")]),s._v(" u修饰符")]),s._v(" "),e("p",[s._v("ES6 对正则表达式添加了u修饰符，含义为“Unicode 模式”，用来正确处理大于\\uFFFF的 Unicode 字符。也就是说，会正确处理四个字节的 UTF-16 编码。")]),s._v(" "),e("p",[s._v("/^\\uD83D/u.test('\\uD83D\\uDC2A') // false\n/^\\uD83D/.test('\\uD83D\\uDC2A') // true")]),s._v(" "),e("h3",{attrs:{id:"_1-点字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-点字符"}},[s._v("#")]),s._v(" 1. 点字符")]),s._v(" "),e("p",[s._v("点（.）字符在正则表达式中，含义是除了换行符以外的任意单个字符。对于码点大于0xFFFF的 Unicode 字符，点字符不能识别，必须加上u修饰符。")]),s._v(" "),e("div",{staticClass:"language-str line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var s = '𠮷';\n\n/^.$/.test(s) // false\n/^.$/u.test(s) // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"_2-unicode-字符表示法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-unicode-字符表示法"}},[s._v("#")]),s._v(" 2. Unicode 字符表示法")]),s._v(" "),e("p",[s._v("ES6 新增了使用大括号表示 Unicode 字符，这种表示法在正则表达式中必须加上u修饰符，才能识别当中的大括号，否则会被解读为量词。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/\\u{61}/.test('a') // false\n/\\u{61}/u.test('a') // true\n/\\u{20BB7}/u.test('𠮷') // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h3",{attrs:{id:"_3-量词"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-量词"}},[s._v("#")]),s._v(" 3. 量词")]),s._v(" "),e("p",[s._v("使用u修饰符后，所有量词都会正确识别码点大于0xFFFF的 Unicode 字符。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/a{2}/.test('aa') // true\n/a{2}/u.test('aa') // true\n/𠮷{2}/.test('𠮷𠮷') // false\n/𠮷{2}/u.test('𠮷𠮷') // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h3",{attrs:{id:"_4-预定义模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-预定义模式"}},[s._v("#")]),s._v(" 4. 预定义模式")]),s._v(" "),e("p",[s._v("u修饰符也影响到预定义模式，能否正确识别码点大于0xFFFF的 Unicode 字符。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/^\\S$/.test('𠮷') // false\n/^\\S$/u.test('𠮷') // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"_5-i-修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-i-修饰符"}},[s._v("#")]),s._v(" 5. i 修饰符")]),s._v(" "),e("p",[s._v("有些 Unicode 字符的编码不同，但是字型很相近，比如，\\u004B与\\u212A都是大写的K。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/[a-z]/i.test('\\u212A') // false\n/[a-z]/iu.test('\\u212A') // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"_6-regexp-prototype-unicode-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-regexp-prototype-unicode-属性"}},[s._v("#")]),s._v(" 6. RegExp.prototype.unicode 属性")]),s._v(" "),e("p",[s._v("正则实例对象新增unicode属性，表示是否设置了u修饰符。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const r1 = /hello/;\nconst r2 = /hello/u;\n\nr1.unicode // false\nr2.unicode // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"y修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#y修饰符"}},[s._v("#")]),s._v(" y修饰符")]),s._v(" "),e("p",[s._v("y修饰符的作用与g修饰符类似，也是全局匹配，后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于，g修饰符只要剩余位置中存在匹配就可，而y修饰符确保匹配必须从剩余的第一个位置开始，这也就是“粘连”的涵义。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var s = \'aaa_aa_a\';\nvar r1 = /a+/g;\nvar r2 = /a+/y;\n\nr1.exec(s) // ["aaa"]\nr2.exec(s) // ["aaa"]\n\nr1.exec(s) // ["aa"]\nr2.exec(s) // null\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[s._v("如果改一下正则表达式，保证每次都能头部匹配，y修饰符就会返回结果了。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var s = \'aaa_aa_a\';\nvar r = /a+_/y;\n\nr.exec(s) // ["aaa_"]\nr.exec(s) // ["aa_"]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("使用lastIndex属性，可以更好地说明y修饰符。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const REGEX = /a/g;\n\n// 指定从2号位置（y）开始匹配\nREGEX.lastIndex = 2;\n\n// 匹配成功\nconst match = REGEX.exec('xaya');\n\n// 在3号位置匹配成功\nmatch.index // 3\n\n// 下一次匹配从4号位开始\nREGEX.lastIndex // 4\n\n// 4号位开始匹配失败\nREGEX.exec('xaya') // null\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("与y修饰符相匹配，ES6 的正则实例对象多了sticky属性，表示是否设置了y修饰符。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var r = /hello\\d/y;\nr.sticky // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"flags属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flags属性"}},[s._v("#")]),s._v(" flags属性")]),s._v(" "),e("p",[s._v("ES6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// ES5 的 source 属性\n// 返回正则表达式的正文\n/abc/ig.source\n// \"abc\"\n\n// ES6 的 flags 属性\n// 返回正则表达式的修饰符\n/abc/ig.flags\n// 'gi'\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h2",{attrs:{id:"具名组匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#具名组匹配"}},[s._v("#")]),s._v(" 具名组匹配")]),s._v(" "),e("p",[s._v("ES2018 引入了具名组匹配（Named Capture Groups），允许为每一个组匹配指定一个名字，既便于阅读代码，又便于引用。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const RE_DATE = /(?<year>\\d{4})-(?<month>\\d{2})-(?<day>\\d{2})/;\n\nconst matchObj = RE_DATE.exec('1999-12-31');\nconst year = matchObj.groups.year; // 1999\nconst month = matchObj.groups.month; // 12\nconst day = matchObj.groups.day; // 31\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("上面代码中，“具名组匹配”在圆括号内部，模式的头部添加“问号 + 尖括号 + 组名”（?<"),e("code",[s._v("year")]),s._v(">），然后就可以在exec方法返回结果的groups属性上引用该组名。同时，数字序号（matchObj[1]）依然有效。")]),s._v(" "),e("h2",{attrs:{id:"matchall"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#matchall"}},[s._v("#")]),s._v(" matchAll")]),s._v(" "),e("p",[s._v("目前有一个提案，增加了String.prototype.matchAll方法，可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('const string = \'test1test2test3\';\n\n// g 修饰符加不加都可以\nconst regex = /t(e)(st(\\d?))/g;\n\nfor (const match of string.matchAll(regex)) {\n  console.log(match);\n}\n// ["test1", "e", "st1", "1", index: 0, input: "test1test2test3"]\n// ["test2", "e", "st2", "2", index: 5, input: "test1test2test3"]\n// ["test3", "e", "st3", "3", index: 10, input: "test1test2test3"]\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("遍历器转为数组是非常简单的，使用...运算符和Array.from方法就可以了。")]),s._v(" "),e("div",{staticClass:"language-reg line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 转为数组方法一\n[...string.matchAll(regex)]\n\n// 转为数组方法二\nArray.from(string.matchAll(regex));\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);