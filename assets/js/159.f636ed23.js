(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{476:function(s,a,n){"use strict";n.r(a);var e=n(17),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"包装对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#包装对象"}},[s._v("#")]),s._v(" 包装对象")]),s._v(" "),n("h2",{attrs:{id:"定义"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[s._v("#")]),s._v(" 定义")]),s._v(" "),n("p",[s._v("所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的Number、String、Boolean三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。")]),s._v(" "),n("div",{staticClass:"language-ar line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var v1 = new Number(123);\nvar v2 = new String(\'abc\');\nvar v3 = new Boolean(true);\n\ntypeof v1 // "object"\ntypeof v2 // "object"\ntypeof v3 // "object"\n\nv1 === 123 // false\nv2 === \'abc\' // false\nv3 === true // false\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("包装对象的设计目的，首先是使得“对象”这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型，其次是使得原始类型的值也有办法调用自己的方法。")]),s._v(" "),n("p",[s._v("Number、String和Boolean这三个原生对象，如果不作为构造函数调用（即调用时不加new），而是作为普通函数调用，常常用于将任意类型的值转为数值、字符串和布尔值。")]),s._v(" "),n("div",{staticClass:"language-ar line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 字符串转为数值\nNumber('123') // 123\n\n// 数值转为字符串\nString(123) // \"123\"\n\n// 数值转为布尔值\nBoolean(123) // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"实例方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),n("h3",{attrs:{id:"_1-valueof"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-valueof"}},[s._v("#")]),s._v(" 1. valueOf")]),s._v(" "),n("p",[s._v("valueOf()方法返回包装对象实例对应的原始类型的值。")]),s._v(" "),n("div",{staticClass:"language-ar line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("new Number(123).valueOf()  // 123\nnew String('abc').valueOf() // \"abc\"\nnew Boolean(true).valueOf() // true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h3",{attrs:{id:"_2-tostring"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-tostring"}},[s._v("#")]),s._v(" 2. toString")]),s._v(" "),n("p",[s._v("toString()方法返回对应的字符串形式。")]),s._v(" "),n("div",{staticClass:"language-ar line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('new Number(123).toString() // "123"\nnew String(\'abc\').toString() // "abc"\nnew Boolean(true).toString() // "true"\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"自动转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自动转换"}},[s._v("#")]),s._v(" 自动转换")]),s._v(" "),n("p",[s._v("某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。")]),s._v(" "),n("p",[s._v("比如，字符串可以调用length属性，返回字符串的长度。")]),s._v(" "),n("div",{staticClass:"language-ar line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("'abc'.length // 3\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("原始类型与实例对象的自动转换。")]),s._v(" "),n("div",{staticClass:"language-ar line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('var str = \'abc\';\nstr.length // 3\n\n// 等同于\nvar strObj = new String(str)\n// String {\n//   0: "a", 1: "b", 2: "c", length: 3, [[PrimitiveValue]]: "abc"\n// }\nstrObj.length // 3\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("自动转换生成的包装对象是只读的，无法修改。所以，字符串无法添加新属性。")]),s._v(" "),n("div",{staticClass:"language-ar line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var s = 'Hello World';\ns.x = 123;\ns.x // undefined\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"自定义方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义方法"}},[s._v("#")]),s._v(" 自定义方法")]),s._v(" "),n("p",[s._v("除了原生的实例方法，包装对象还可以自定义方法和属性，供原始类型的值直接调用。")]),s._v(" "),n("p",[s._v("比如，我们可以新增一个double方法，使得字符串和数字翻倍。")]),s._v(" "),n("div",{staticClass:"language-ar line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("String.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n'abc'.double()\n// abcabc\n\nNumber.prototype.double = function () {\n  return this.valueOf() + this.valueOf();\n};\n\n(123).double() // 246\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])])])}),[],!1,null,null,null);a.default=t.exports}}]);