(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{531:function(e,a,n){"use strict";n.r(a);var s=n(17),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"generator函数的异步应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generator函数的异步应用"}},[e._v("#")]),e._v(" Generator函数的异步应用")]),e._v(" "),n("h2",{attrs:{id:"传统方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#传统方法"}},[e._v("#")]),e._v(" 传统方法")]),e._v(" "),n("p",[e._v("ES6 诞生以前，异步编程的方法，大概有下面四种。")]),e._v(" "),n("ul",[n("li",[e._v("回调函数")]),e._v(" "),n("li",[e._v("事件监听")]),e._v(" "),n("li",[e._v("发布/订阅")]),e._v(" "),n("li",[e._v("Promise 对象")])]),e._v(" "),n("p",[e._v("Generator 函数将 JavaScript 异步编程带入了一个全新的阶段。")]),e._v(" "),n("h2",{attrs:{id:"基本概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),n("h3",{attrs:{id:"_1-异步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步"}},[e._v("#")]),e._v(" 1. 异步")]),e._v(" "),n("p",[e._v('所谓"异步"，简单说就是一个任务不是连续完成的，可以理解成该任务被人为分成两段，先执行第一段，然后转而执行其他任务，等做好了准备，再回过头执行第二段。')]),e._v(" "),n("p",[e._v("比如，有一个任务是读取文件进行处理，任务的第一段是向操作系统发出请求，要求读取文件。然后，程序执行其他任务，等到操作系统返回文件，再接着执行任务的第二段（处理文件）。这种不连续的执行，就叫做异步。")]),e._v(" "),n("p",[e._v("相应地，连续的执行就叫做同步。由于是连续执行，不能插入其他任务，所以操作系统从硬盘读取文件的这段时间，程序只能干等着。")]),e._v(" "),n("h3",{attrs:{id:"_2-回调函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-回调函数"}},[e._v("#")]),e._v(" 2. 回调函数")]),e._v(" "),n("p",[e._v('JavaScript 语言对异步编程的实现，就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。回调函数的英语名字callback，直译过来就是"重新调用"。')]),e._v(" "),n("p",[e._v("读取文件进行处理，是这样写的。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fs.readFile('/etc/passwd', 'utf-8', function (err, data) {\n  if (err) throw err;\n  console.log(data);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("上面代码中，readFile函数的第三个参数，就是回调函数，也就是任务的第二段。等到操作系统返回了/etc/passwd这个文件以后，回调函数才会执行。")]),e._v(" "),n("p",[e._v("一个有趣的问题是，为什么 Node 约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是null）？")]),e._v(" "),n("p",[e._v("原因是执行分成两段，第一段执行完以后，任务所在的上下文环境就已经结束了。在这以后抛出的错误，原来的上下文环境已经无法捕捉，只能当作参数，传入第二段。")]),e._v(" "),n("h3",{attrs:{id:"_3-promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-promise"}},[e._v("#")]),e._v(" 3. Promise")]),e._v(" "),n("p",[e._v("回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("fs.readFile(fileA, 'utf-8', function (err, data) {\n  fs.readFile(fileB, 'utf-8', function (err, data) {\n    // ...\n  });\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v('不难想象，如果依次读取两个以上的文件，就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。因为多个异步操作形成了强耦合，只要有一个操作需要修改，它的上层回调函数和下层回调函数，可能都要跟着修改。这种情况就称为"回调函数地狱"（callback hell）。')]),e._v(" "),n("p",[e._v("Promise 对象就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的嵌套，改成链式调用。采用 Promise，连续读取多个文件，写法如下。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var readFile = require('fs-readfile-promise');\n\nreadFile(fileA)\n.then(function (data) {\n  console.log(data.toString());\n})\n.then(function () {\n  return readFile(fileB);\n})\n.then(function (data) {\n  console.log(data.toString());\n})\n.catch(function (err) {\n  console.log(err);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("上面代码中，我使用了fs-readfile-promise模块，它的作用就是返回一个 Promise 版本的readFile函数。Promise 提供then方法加载回调函数，catch方法捕捉执行过程中抛出的错误。")]),e._v(" "),n("p",[e._v("可以看到，Promise 的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。")]),e._v(" "),n("p",[e._v("Promise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。")]),e._v(" "),n("p",[e._v("那么，有没有更好的写法呢？")]),e._v(" "),n("h2",{attrs:{id:"generator-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#generator-函数"}},[e._v("#")]),e._v(" Generator 函数")]),e._v(" "),n("h3",{attrs:{id:"_1-协程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-协程"}},[e._v("#")]),e._v(" 1. 协程")]),e._v(" "),n("p",[e._v('传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做"协程"（coroutine），意思是多个线程互相协作，完成异步任务。')]),e._v(" "),n("p",[e._v("协程有点像函数，又有点像线程。它的运行流程大致如下。")]),e._v(" "),n("ul",[n("li",[e._v("第一步，协程A开始执行。")]),e._v(" "),n("li",[e._v("第二步，协程A执行到一半，进入暂停，执行权转移到协程B。")]),e._v(" "),n("li",[e._v("第三步，（一段时间后）协程B交还执行权。")]),e._v(" "),n("li",[e._v("第四步，协程A恢复执行。")])]),e._v(" "),n("p",[e._v("上面流程的协程A，就是异步任务，因为它分成两段（或多段）执行。")]),e._v(" "),n("p",[e._v("举例来说，读取文件的协程写法如下。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* asyncJob() {\n  // ...其他代码\n  var f = yield readFile(fileA);\n  // ...其他代码\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[e._v("上面代码的函数asyncJob是一个协程，它的奥妙就在其中的yield命令。它表示执行到此处，执行权将交给其他协程。也就是说，yield命令是异步两个阶段的分界线。")]),e._v(" "),n("p",[e._v("协程遇到yield命令就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除yield命令，简直一模一样。")]),e._v(" "),n("h3",{attrs:{id:"_2-协程的-generator-函数实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-协程的-generator-函数实现"}},[e._v("#")]),e._v(" 2. 协程的 Generator 函数实现")]),e._v(" "),n("p",[e._v("Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。")]),e._v(" "),n("p",[e._v("整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用yield语句注明。Generator 函数的执行方法如下。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* gen(x) {\n  var y = yield x + 2;\n  return y;\n}\n\nvar g = gen(1);\ng.next() // { value: 3, done: false }\ng.next() // { value: undefined, done: true }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面代码中，调用 Generator 函数，会返回一个内部指针（即遍历器）g。这是 Generator 函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针g的next方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的yield语句，上例是执行到x + 2为止。")]),e._v(" "),n("p",[e._v("换言之，next方法的作用是分阶段执行Generator函数。每次调用next方法，会返回一个对象，表示当前阶段的信息（value属性和done属性）。value属性是yield语句后面表达式的值，表示当前阶段的值；done属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段。")]),e._v(" "),n("h3",{attrs:{id:"_3-generator-函数的数据交换和错误处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-generator-函数的数据交换和错误处理"}},[e._v("#")]),e._v(" 3. Generator 函数的数据交换和错误处理")]),e._v(" "),n("p",[e._v("Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。")]),e._v(" "),n("p",[e._v("next返回值的 value 属性，是 Generator 函数向外输出数据；next方法还可以接受参数，向 Generator 函数体内输入数据。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* gen(x){\n  var y = yield x + 2;\n  return y;\n}\n\nvar g = gen(1);\ng.next() // { value: 3, done: false }\ng.next(2) // { value: 2, done: true }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面代码中，第一个next方法的value属性，返回表达式x + 2的值3。第二个next方法带有参数2，这个参数可以传入 Generator 函数，作为上个阶段异步任务的返回结果，被函数体内的变量y接收。因此，这一步的value属性，返回的就是2（变量y的值）。")]),e._v(" "),n("p",[e._v("Generator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* gen(x){\n  try {\n    var y = yield x + 2;\n  } catch (e){\n    console.log(e);\n  }\n  return y;\n}\n\nvar g = gen(1);\ng.next();\ng.throw('出错了');\n// 出错了\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("上面代码的最后一行，Generator 函数体外，使用指针对象的throw方法抛出的错误，可以被函数体内的try...catch代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。")]),e._v(" "),n("h3",{attrs:{id:"_4-异步任务的封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-异步任务的封装"}},[e._v("#")]),e._v(" 4. 异步任务的封装")]),e._v(" "),n("p",[e._v("下面看看如何使用 Generator 函数，执行一个真实的异步任务。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var fetch = require('node-fetch');\n\nfunction* gen(){\n  var url = 'https://api.github.com/users/github';\n  var result = yield fetch(url);\n  console.log(result.bio);\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("上面代码中，Generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 JSON 格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了yield命令。")]),e._v(" "),n("p",[e._v("执行这段代码的方法如下。")]),e._v(" "),n("div",{staticClass:"language-gen line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var g = gen();\nvar result = g.next();\n\nresult.value.then(function(data){\n  return data.json();\n}).then(function(data){\n  g.next(data);\n});\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("上面代码中，首先执行 Generator 函数，获取遍历器对象，然后使用next方法（第二行），执行异步任务的第一阶段。由于Fetch模块返回的是一个 Promise 对象，因此要用then方法调用下一个next方法。")]),e._v(" "),n("p",[e._v("可以看到，虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。")])])}),[],!1,null,null,null);a.default=t.exports}}]);