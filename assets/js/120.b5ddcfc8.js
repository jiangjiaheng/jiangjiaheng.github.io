(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{437:function(s,n,a){"use strict";a.r(n);var e=a(17),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("h2",{attrs:{id:"单线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单线程模型"}},[s._v("#")]),s._v(" 单线程模型")]),s._v(" "),a("p",[s._v("单线程模型指的是，JavaScript 只在一个线程上运行。也就是说，JavaScript 同时只能执行一个任务，其他任务都必须在后面排队等待。")]),s._v(" "),a("p",[s._v("注意，JavaScript 只在一个线程上运行，不代表 JavaScript 引擎只有一个线程。事实上，JavaScript 引擎有多个线程，单个脚本只能在一个线程上运行（称为主线程），其他线程都是在后台配合。")]),s._v(" "),a("h2",{attrs:{id:"同步任务和异步任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步任务和异步任务"}},[s._v("#")]),s._v(" 同步任务和异步任务")]),s._v(" "),a("p",[s._v("程序里面所有的任务，可以分成两类：同步任务（synchronous）和异步任务（asynchronous）。")]),s._v(" "),a("p",[s._v("同步任务是那些没有被引擎挂起、在主线程上排队执行的任务。只有前一个任务执行完毕，才能执行后一个任务。")]),s._v(" "),a("p",[s._v("异步任务是那些被引擎放在一边，不进入主线程、而进入任务队列的任务。只有引擎认为某个异步任务可以执行了（比如 Ajax 操作从服务器得到了结果），该任务（采用回调函数的形式）才会进入主线程执行。排在异步任务后面的代码，不用等待异步任务结束会马上运行，也就是说，异步任务不具有“堵塞”效应。")]),s._v(" "),a("h2",{attrs:{id:"任务队列和事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任务队列和事件循环"}},[s._v("#")]),s._v(" 任务队列和事件循环")]),s._v(" "),a("p",[s._v("JavaScript 运行时，除了一个正在运行的主线程，引擎还提供一个任务队列（task queue），里面是各种需要当前程序处理的异步任务。（实际上，根据异步任务的类型，存在多个任务队列。为了方便理解，这里假设只存在一个队列。）")]),s._v(" "),a("p",[s._v("首先，主线程会去执行所有的同步任务。等到同步任务全部执行完，就会去看任务队列里面的异步任务。如果满足条件，那么异步任务就重新进入主线程开始执行，这时它就变成同步任务了。等到执行完，下一个异步任务再进入主线程开始执行。一旦任务队列清空，程序就结束执行。")]),s._v(" "),a("p",[s._v("异步任务的写法通常是回调函数。一旦异步任务重新进入主线程，就会执行对应的回调函数。如果一个异步任务没有回调函数，就不会进入任务队列，也就是说，不会重新进入主线程，因为没有用回调函数指定下一步的操作。")]),s._v(" "),a("h2",{attrs:{id:"异步操作的模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步操作的模式"}},[s._v("#")]),s._v(" 异步操作的模式")]),s._v(" "),a("h3",{attrs:{id:"_1-回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-回调函数"}},[s._v("#")]),s._v(" 1. 回调函数")]),s._v(" "),a("p",[s._v("回调函数是异步操作最基本的方法。")]),s._v(" "),a("p",[s._v("下面是两个函数f1和f2，编程的意图是f2必须等到f1执行完成，才能执行。")]),s._v(" "),a("div",{staticClass:"language-yib line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f1() {\n  // ...\n}\n\nfunction f2() {\n  // ...\n}\n\nf1();\nf2();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面代码的问题在于，如果f1是异步操作，f2会立即执行，不会等到f1结束再执行。")]),s._v(" "),a("p",[s._v("这时，可以考虑改写f1，把f2写成f1的回调函数。")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f1(callback) {\n  // ...\n  callback();\n}\n\nfunction f2() {\n  // ...\n}\n\nf1(f2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"_2-事件监听"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件监听"}},[s._v("#")]),s._v(" 2.事件监听")]),s._v(" "),a("p",[s._v("另一种思路是采用事件驱动模式。异步任务的执行不取决于代码的顺序，而取决于某个事件是否发生。")]),s._v(" "),a("p",[s._v("还是以f1和f2为例。首先，为f1绑定一个事件（这里采用的 jQuery 的写法）。")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("f1.on('done', f2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写：")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f1() {\n  setTimeout(function () {\n    // ...\n    f1.trigger('done');\n  }, 1000);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，f1.trigger('done')表示，执行完成后，立即触发done事件，从而开始执行f2。")]),s._v(" "),a("h3",{attrs:{id:"_3-发布-订阅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-发布-订阅"}},[s._v("#")]),s._v(" 3. 发布/订阅")]),s._v(" "),a("p",[s._v("事件完全可以理解成“信号”，如果存在一个“信号中心”，某个任务执行完成，就向信号中心“发布”（publish）一个信号，其他任务可以向信号中心“订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做”发布/订阅模式”（publish-subscribe pattern），又称“观察者模式”（observer pattern）。")]),s._v(" "),a("p",[s._v("这个模式有多种实现，下面采用的是 Ben Alman 的 Tiny Pub/Sub，这是 jQuery 的一个插件。")]),s._v(" "),a("p",[s._v("首先，f2向信号中心jQuery订阅done信号。")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jQuery.subscribe('done', f2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("然后，f1进行如下改写。")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f1() {\n  setTimeout(function () {\n    // ...\n    jQuery.publish('done');\n  }, 1000);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("上面代码中，jQuery.publish('done')的意思是，f1执行完成后，向信号中心jQuery发布done信号，从而引发f2的执行。")]),s._v(" "),a("p",[s._v("f2完成执行后，可以取消订阅（unsubscribe）。")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jQuery.unsubscribe('done', f2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"异步操作的流程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步操作的流程控制"}},[s._v("#")]),s._v(" 异步操作的流程控制")]),s._v(" "),a("h3",{attrs:{id:"_1-串行执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-串行执行"}},[s._v("#")]),s._v(" 1. 串行执行")]),s._v(" "),a("p",[s._v("我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var items = [ 1, 2, 3, 4, 5, 6 ];\nvar results = [];\n\nfunction async(arg, callback) {\n  console.log('参数为 ' + arg +' , 1秒后返回结果');\n  setTimeout(function () { callback(arg * 2); }, 1000);\n}\n\nfunction final(value) {\n  console.log('完成: ', value);\n}\n\nfunction series(item) {\n  if(item) {\n    async( item, function(result) {\n      results.push(result);\n      return series(items.shift());\n    });\n  } else {\n      return final(results[results.length - 1]);\n  }\n}\n\nseries(items.shift());\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h3",{attrs:{id:"_2-并行执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-并行执行"}},[s._v("#")]),s._v(" 2. 并行执行")]),s._v(" "),a("p",[s._v("流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var items = [ 1, 2, 3, 4, 5, 6 ];\nvar results = [];\n\nfunction async(arg, callback) {\n  console.log('参数为 ' + arg +' , 1秒后返回结果');\n  setTimeout(function () { callback(arg * 2); }, 1000);\n}\n\nfunction final(value) {\n  console.log('完成: ', value);\n}\n\nitems.forEach(function(item) {\n  async(item, function(result){\n    results.push(result);\n    if(results.length === items.length) {\n      final(results[results.length - 1]);\n    }\n  })\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h3",{attrs:{id:"_3-并行与串行的结合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-并行与串行的结合"}},[s._v("#")]),s._v(" 3. 并行与串行的结合")]),s._v(" "),a("p",[s._v("所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务，这样就避免了过分占用系统资源。")]),s._v(" "),a("div",{staticClass:"language-yb line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var items = [ 1, 2, 3, 4, 5, 6 ];\nvar results = [];\nvar running = 0;\nvar limit = 2;\n\nfunction async(arg, callback) {\n  console.log('参数为 ' + arg +' , 1秒后返回结果');\n  setTimeout(function () { callback(arg * 2); }, 1000);\n}\n\nfunction final(value) {\n  console.log('完成: ', value);\n}\n\nfunction launcher() {\n  while(running < limit && items.length > 0) {\n    var item = items.shift();\n    async(item, function(result) {\n      results.push(result);\n      running--;\n      if(items.length > 0) {\n        launcher();\n      } else if(running == 0) {\n        final(results);\n      }\n    });\n    running++;\n  }\n}\n\nlauncher();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);