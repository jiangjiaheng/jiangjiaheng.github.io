(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{457:function(e,n,t){"use strict";t.r(n);var s=t(17),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"node-接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-接口"}},[e._v("#")]),e._v(" Node 接口")]),e._v(" "),t("h2",{attrs:{id:"属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[e._v("#")]),e._v(" 属性")]),e._v(" "),t("h3",{attrs:{id:"_1-node-prototype-nodetype"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-node-prototype-nodetype"}},[e._v("#")]),e._v(" 1. Node.prototype.nodeType")]),e._v(" "),t("p",[e._v("nodeType属性返回一个整数值，表示节点的类型。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.nodeType // 9\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("上面代码中，文档节点的类型值为9。")]),e._v(" "),t("p",[e._v("Node 对象定义了几个常量，对应这些类型值。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.nodeType === Node.DOCUMENT_NODE // true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("上面代码中，文档节点的nodeType属性等于常量Node.DOCUMENT_NODE。")]),e._v(" "),t("p",[e._v("不同节点的nodeType属性值和对应的常量如下。")]),e._v(" "),t("ul",[t("li",[e._v("文档节点（document）：9，对应常量Node.DOCUMENT_NODE")]),e._v(" "),t("li",[e._v("元素节点（element）：1，对应常量Node.ELEMENT_NODE")]),e._v(" "),t("li",[e._v("属性节点（attr）：2，对应常量Node.ATTRIBUTE_NODE")]),e._v(" "),t("li",[e._v("文本节点（text）：3，对应常量Node.TEXT_NODE")]),e._v(" "),t("li",[e._v("文档片断节点（DocumentFragment）：11，对应常量Node.DOCUMENT_FRAGMENT_NODE")]),e._v(" "),t("li",[e._v("文档类型节点（DocumentType）：10，对应常量Node.DOCUMENT_TYPE_NODE")]),e._v(" "),t("li",[e._v("注释节点（Comment）：8，对应常量Node.COMMENT_NODE")])]),e._v(" "),t("p",[e._v("确定节点类型时，使用nodeType属性是常用方法。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var node = document.documentElement.firstChild;\nif (node.nodeType === Node.ELEMENT_NODE) {\n  console.log('该节点是元素节点');\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h3",{attrs:{id:"_2-node-prototype-nodename"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-node-prototype-nodename"}},[e._v("#")]),e._v(" 2. Node.prototype.nodeName")]),e._v(" "),t("p",[e._v("nodeName属性返回节点的名称。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <div id="d1">hello world</div>\nvar div = document.getElementById(\'d1\');\ndiv.nodeName // "DIV"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("上面代码中，元素节点"),t("code",[e._v("<div>")]),e._v("的nodeName属性就是大写的标签名DIV。")]),e._v(" "),t("p",[e._v("不同节点的nodeName属性值如下。")]),e._v(" "),t("ul",[t("li",[e._v("文档节点（document）：#document")]),e._v(" "),t("li",[e._v("元素节点（element）：大写的标签名")]),e._v(" "),t("li",[e._v("属性节点（attr）：属性的名称")]),e._v(" "),t("li",[e._v("文本节点（text）：#text")]),e._v(" "),t("li",[e._v("文档片断节点（DocumentFragment）：#document-fragment")]),e._v(" "),t("li",[e._v("文档类型节点（DocumentType）：文档的类型")]),e._v(" "),t("li",[e._v("注释节点（Comment）：#comment")])]),e._v(" "),t("h3",{attrs:{id:"_3-node-prototype-nodevalue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-node-prototype-nodevalue"}},[e._v("#")]),e._v(" 3. Node.prototype.nodeValue")]),e._v(" "),t("p",[e._v("nodeValue属性返回一个字符串，表示当前节点本身的文本值，该属性可读写。")]),e._v(" "),t("p",[e._v("只有文本节点（text）、注释节点（comment）和属性节点（attr）有文本值，因此这三类节点的nodeValue可以返回结果，其他类型的节点一律返回null。同样的，也只有这三类节点可以设置nodeValue属性的值，其他类型的节点设置无效。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <div id="d1">hello world</div>\nvar div = document.getElementById(\'d1\');\ndiv.nodeValue // null\ndiv.firstChild.nodeValue // "hello world"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("上面代码中，div是元素节点，nodeValue属性返回null。div.firstChild是文本节点，所以可以返回文本值。")]),e._v(" "),t("h3",{attrs:{id:"_4-node-prototype-textcontent"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-node-prototype-textcontent"}},[e._v("#")]),e._v(" 4. Node.prototype.textContent")]),e._v(" "),t("p",[e._v("textContent属性返回当前节点和它的所有后代节点的文本内容。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// HTML 代码为\n// <div id=\"divA\">This is <span>some</span> text</div>\n\ndocument.getElementById('divA').textContent\n// This is some text\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("textContent属性自动忽略当前节点内部的 HTML 标签，返回所有文本内容。")]),e._v(" "),t("p",[e._v("该属性是可读写的，设置该属性的值，会用一个新的文本节点，替换所有原来的子节点。它还有一个好处，就是自动对 HTML 标签转义。这很适合用于用户提供的内容。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.getElementById('foo').textContent = '<p>GoodBye!</p>';\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("上面代码在插入文本时，会将"),t("code",[e._v("<p>")]),e._v("标签解释为文本，而不会当作标签处理。")]),e._v(" "),t("p",[e._v("对于文本节点（text）、注释节点（comment）和属性节点（attr），textContent属性的值与nodeValue属性相同。对于其他类型的节点，该属性会将每个子节点（不包括注释节点）的内容连接在一起返回。如果一个节点没有子节点，则返回空字符串。")]),e._v(" "),t("p",[e._v("文档节点（document）和文档类型节点（doctype）的textContent属性为null。如果要读取整个文档的内容，可以使用document.documentElement.textContent。")]),e._v(" "),t("h3",{attrs:{id:"_5-node-prototype-baseuri"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-node-prototype-baseuri"}},[e._v("#")]),e._v(" 5. Node.prototype.baseURI")]),e._v(" "),t("p",[e._v("baseURI属性返回一个字符串，表示当前网页的绝对路径。浏览器根据这个属性，计算网页上的相对路径的 URL。该属性为只读。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 当前网页的网址为\n// http://www.example.com/index.html\ndocument.baseURI\n// "http://www.example.com/index.html"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("如果无法读到网页的 URL，baseURI属性返回null。")]),e._v(" "),t("p",[e._v("该属性的值一般由当前网址的 URL（即window.location属性）决定，但是可以使用 HTML 的"),t("code",[e._v("<base>")]),e._v("标签，改变该属性的值。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<base href="http://www.example.com/page.html">\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("设置了以后，baseURI属性就返回"),t("code",[e._v("<base>")]),e._v("标签设置的值。")]),e._v(" "),t("h3",{attrs:{id:"_6-node-prototype-ownerdocument"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-node-prototype-ownerdocument"}},[e._v("#")]),e._v(" 6. Node.prototype.ownerDocument")]),e._v(" "),t("p",[e._v("Node.ownerDocument属性返回当前节点所在的顶层文档对象，即document对象。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var d = p.ownerDocument;\nd === document // true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("document对象本身的ownerDocument属性，返回null。")]),e._v(" "),t("h3",{attrs:{id:"_7-node-prototype-nextsibling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-node-prototype-nextsibling"}},[e._v("#")]),e._v(" 7. Node.prototype.nextSibling")]),e._v(" "),t("p",[e._v("Node.nextSibling属性返回紧跟在当前节点后面的第一个同级节点。如果当前节点后面没有同级节点，则返回null。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// HTML 代码如下\n// <div id=\"d1\">hello</div><div id=\"d2\">world</div>\nvar d1 = document.getElementById('d1');\nvar d2 = document.getElementById('d2');\n\nd1.nextSibling === d2 // true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("上面代码中，d1.nextSibling就是紧跟在d1后面的同级节点d2。")]),e._v(" "),t("p",[e._v("注意，该属性还包括文本节点和注释节点（"),t("code",[e._v("\x3c!-- comment --\x3e")]),e._v("）。因此如果当前节点后面有空格，该属性会返回一个文本节点，内容为空格。")]),e._v(" "),t("p",[e._v("nextSibling属性可以用来遍历所有子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var el = document.getElementById('div1').firstChild;\n\nwhile (el !== null) {\n  console.log(el.nodeName);\n  el = el.nextSibling;\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("上面代码遍历div1节点的所有子节点。")]),e._v(" "),t("h3",{attrs:{id:"_8-node-prototype-previoussibling"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-node-prototype-previoussibling"}},[e._v("#")]),e._v(" 8. Node.prototype.previousSibling")]),e._v(" "),t("p",[e._v("previousSibling属性返回当前节点前面的、距离最近的一个同级节点。如果当前节点前面没有同级节点，则返回null。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// HTML 代码如下\n// <div id=\"d1\">hello</div><div id=\"d2\">world</div>\nvar d1 = document.getElementById('d1');\nvar d2 = document.getElementById('d2');\n\nd2.previousSibling === d1 // true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("上面代码中，d2.previousSibling就是d2前面的同级节点d1。")]),e._v(" "),t("p",[e._v("注意，该属性还包括文本节点和注释节点。因此如果当前节点前面有空格，该属性会返回一个文本节点，内容为空格。")]),e._v(" "),t("h3",{attrs:{id:"_9-node-prototype-parentnode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-node-prototype-parentnode"}},[e._v("#")]),e._v(" 9. Node.prototype.parentNode")]),e._v(" "),t("p",[e._v("parentNode属性返回当前节点的父节点。对于一个节点来说，它的父节点只可能是三种类型：元素节点（element）、文档节点（document）和文档片段节点（documentfragment）。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (node.parentNode) {\n  node.parentNode.removeChild(node);\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("上面代码中，通过node.parentNode属性将node节点从文档里面移除。")]),e._v(" "),t("p",[e._v("文档节点（document）和文档片段节点（documentfragment）的父节点都是null。另外，对于那些生成后还没插入 DOM 树的节点，父节点也是null。")]),e._v(" "),t("h3",{attrs:{id:"_10-node-prototype-parentelement"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-node-prototype-parentelement"}},[e._v("#")]),e._v(" 10. Node.prototype.parentElement")]),e._v(" "),t("p",[e._v("parentElement属性返回当前节点的父元素节点。如果当前节点没有父节点，或者父节点类型不是元素节点，则返回null。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("if (node.parentElement) {\n  node.parentElement.style.color = 'red';\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("上面代码中，父元素节点的样式设定了红色。")]),e._v(" "),t("p",[e._v("由于父节点只可能是三种类型：元素节点、文档节点（document）和文档片段节点（documentfragment）。parentElement属性相当于把后两种父节点都排除了。")]),e._v(" "),t("h3",{attrs:{id:"_11-node-prototype-firstchild-node-prototype-lastchild"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-node-prototype-firstchild-node-prototype-lastchild"}},[e._v("#")]),e._v(" 11. Node.prototype.firstChild，Node.prototype.lastChild")]),e._v(" "),t("p",[e._v("firstChild属性返回当前节点的第一个子节点，如果当前节点没有子节点，则返回null。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <p id="p1"><span>First span</span></p>\nvar p1 = document.getElementById(\'p1\');\np1.firstChild.nodeName // "SPAN"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("上面代码中，p元素的第一个子节点是span元素。")]),e._v(" "),t("p",[e._v("注意，firstChild返回的除了元素节点，还可能是文本节点或注释节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// HTML 代码如下\n// <p id="p1">\n//   <span>First span</span>\n//  </p>\nvar p1 = document.getElementById(\'p1\');\np1.firstChild.nodeName // "#text"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("上面代码中，p元素与span元素之间有空白字符，这导致firstChild返回的是文本节点。")]),e._v(" "),t("p",[e._v("lastChild属性返回当前节点的最后一个子节点，如果当前节点没有子节点，则返回null。用法与firstChild属性相同。")]),e._v(" "),t("h3",{attrs:{id:"_12-node-prototype-childnodes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-node-prototype-childnodes"}},[e._v("#")]),e._v(" 12. Node.prototype.childNodes")]),e._v(" "),t("p",[e._v("childNodes属性返回一个类似数组的对象（NodeList集合），成员包括当前节点的所有子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var children = document.querySelector('ul').childNodes;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("上面代码中，children就是ul元素的所有子节点。")]),e._v(" "),t("p",[e._v("使用该属性，可以遍历某个节点的所有子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var div = document.getElementById('div1');\nvar children = div.childNodes;\n\nfor (var i = 0; i < children.length; i++) {\n  // ...\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("文档节点（document）就有两个子节点：文档类型节点（docType）和 HTML 根元素节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var children = document.childNodes;\nfor (var i = 0; i < children.length; i++) {\n  console.log(children[i].nodeType);\n}\n// 10\n// 1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[e._v("上面代码中，文档节点的第一个子节点的类型是10（即文档类型节点），第二个子节点的类型是1（即元素节点）。")]),e._v(" "),t("p",[e._v("注意，除了元素节点，childNodes属性的返回值还包括文本节点和注释节点。如果当前节点不包括任何子节点，则返回一个空的NodeList集合。由于NodeList对象是一个动态集合，一旦子节点发生变化，立刻会反映在返回结果之中。")]),e._v(" "),t("h3",{attrs:{id:"_13-node-prototype-isconnected"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-node-prototype-isconnected"}},[e._v("#")]),e._v(" 13. Node.prototype.isConnected")]),e._v(" "),t("p",[e._v("isConnected属性返回一个布尔值，表示当前节点是否在文档之中。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var test = document.createElement('p');\ntest.isConnected // false\n\ndocument.body.appendChild(test);\ntest.isConnected // true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("上面代码中，test节点是脚本生成的节点，没有插入文档之前，isConnected属性返回false，插入之后返回true。")]),e._v(" "),t("h2",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("h3",{attrs:{id:"_1-node-prototype-appendchild"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-node-prototype-appendchild"}},[e._v("#")]),e._v(" 1. Node.prototype.appendChild()")]),e._v(" "),t("p",[e._v("appendChild()方法接受一个节点对象作为参数，将其作为最后一个子节点，插入当前节点。该方法的返回值就是插入文档的子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var p = document.createElement('p');\ndocument.body.appendChild(p);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("上面代码新建一个"),t("code",[e._v("<p>")]),e._v("节点，将其插入document.body的尾部。")]),e._v(" "),t("p",[e._v("如果参数节点是 DOM 已经存在的节点，appendChild()方法会将其从原来的位置，移动到新位置。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var div = document.getElementById('myDiv');\ndocument.body.appendChild(div);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("上面代码中，插入的是一个已经存在的节点myDiv，结果就是该节点会从原来的位置，移动到document.body的尾部。")]),e._v(" "),t("p",[e._v("如果appendChild()方法的参数是DocumentFragment节点，那么插入的是DocumentFragment的所有子节点，而不是DocumentFragment节点本身。返回值是一个空的DocumentFragment节点。")]),e._v(" "),t("h3",{attrs:{id:"_2-node-prototype-haschildnodes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-node-prototype-haschildnodes"}},[e._v("#")]),e._v(" 2. Node.prototype.hasChildNodes()")]),e._v(" "),t("p",[e._v("hasChildNodes方法返回一个布尔值，表示当前节点是否有子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var foo = document.getElementById('foo');\n\nif (foo.hasChildNodes()) {\n  foo.removeChild(foo.childNodes[0]);\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[e._v("上面代码表示，如果foo节点有子节点，就移除第一个子节点。")]),e._v(" "),t("p",[e._v("注意，子节点包括所有类型的节点，并不仅仅是元素节点。哪怕节点只包含一个空格，hasChildNodes方法也会返回true。")]),e._v(" "),t("p",[e._v("判断一个节点有没有子节点，有许多种方法，下面是其中的三种。")]),e._v(" "),t("h3",{attrs:{id:"_3-node-haschildnodes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-node-haschildnodes"}},[e._v("#")]),e._v(" 3. node.hasChildNodes()")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("node.firstChild !== null\nnode.childNodes && node.childNodes.length > 0\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("hasChildNodes方法结合firstChild属性和nextSibling属性，可以遍历当前节点的所有后代节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function DOMComb(parent, callback) {\n  if (parent.hasChildNodes()) {\n    for (var node = parent.firstChild; node; node = node.nextSibling) {\n      DOMComb(node, callback);\n    }\n  }\n  callback(parent);\n}\n\n// 用法\nDOMComb(document.body, console.log)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[e._v("上面代码中，DOMComb函数的第一个参数是某个指定的节点，第二个参数是回调函数。这个回调函数会依次作用于指定节点，以及指定节点的所有后代节点。")]),e._v(" "),t("h3",{attrs:{id:"_4-node-prototype-clonenode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-node-prototype-clonenode"}},[e._v("#")]),e._v(" 4. Node.prototype.cloneNode()")]),e._v(" "),t("p",[e._v("cloneNode方法用于克隆一个节点。它接受一个布尔值作为参数，表示是否同时克隆子节点。它的返回值是一个克隆出来的新节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var cloneUL = document.querySelector('ul').cloneNode(true);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("该方法有一些使用注意点。")]),e._v(" "),t("p",[e._v("（1）克隆一个节点，会拷贝该节点的所有属性，但是会丧失addEventListener方法和on-属性（即node.onclick = fn），添加在这个节点上的事件回调函数。")]),e._v(" "),t("p",[e._v("（2）该方法返回的节点不在文档之中，即没有任何父节点，必须使用诸如Node.appendChild这样的方法添加到文档之中。")]),e._v(" "),t("p",[e._v('（3）克隆一个节点之后，DOM 有可能出现两个有相同id属性（即id="xxx"）的网页元素，这时应该修改其中一个元素的id属性。如果原节点有name属性，可能也需要修改。')]),e._v(" "),t("h3",{attrs:{id:"_5-node-prototype-insertbefore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-node-prototype-insertbefore"}},[e._v("#")]),e._v(" 5. Node.prototype.insertBefore()")]),e._v(" "),t("p",[e._v("insertBefore方法用于将某个节点插入父节点内部的指定位置。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var insertedNode = parentNode.insertBefore(newNode, referenceNode);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("insertBefore方法接受两个参数，第一个参数是所要插入的节点newNode，第二个参数是父节点parentNode内部的一个子节点referenceNode。newNode将插在referenceNode这个子节点的前面。返回值是插入的新节点newNode。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var p = document.createElement('p');\ndocument.body.insertBefore(p, document.body.firstChild);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("上面代码中，新建一个"),t("code",[e._v("<p>")]),e._v("节点，插在document.body.firstChild的前面，也就是成为document.body的第一个子节点。")]),e._v(" "),t("p",[e._v("如果insertBefore方法的第二个参数为null，则新节点将插在当前节点内部的最后位置，即变成最后一个子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var p = document.createElement('p');\ndocument.body.insertBefore(p, null);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("上面代码中，p将成为document.body的最后一个子节点。这也说明insertBefore的第二个参数不能省略。")]),e._v(" "),t("p",[e._v("注意，如果所要插入的节点是当前 DOM 现有的节点，则该节点将从原有的位置移除，插入新的位置。")]),e._v(" "),t("p",[e._v("由于不存在insertAfter方法，如果新节点要插在父节点的某个子节点后面，可以用insertBefore方法结合nextSibling属性模拟。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("parent.insertBefore(s1, s2.nextSibling);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("上面代码中，parent是父节点，s1是一个全新的节点，s2是可以将s1节点，插在s2节点的后面。如果s2是当前节点的最后一个子节点，则s2.nextSibling返回null，这时s1节点会插在当前节点的最后，变成当前节点的最后一个子节点，等于紧跟在s2的后面。")]),e._v(" "),t("p",[e._v("如果要插入的节点是DocumentFragment类型，那么插入的将是DocumentFragment的所有子节点，而不是DocumentFragment节点本身。返回值将是一个空的DocumentFragment节点。")]),e._v(" "),t("h3",{attrs:{id:"_6-node-prototype-removechild"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-node-prototype-removechild"}},[e._v("#")]),e._v(" 6. Node.prototype.removeChild()")]),e._v(" "),t("p",[e._v("removeChild方法接受一个子节点作为参数，用于从当前节点移除该子节点。返回值是移除的子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var divA = document.getElementById('A');\ndivA.parentNode.removeChild(divA);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("上面代码移除了divA节点。注意，这个方法是在divA的父节点上调用的，不是在divA上调用的。")]),e._v(" "),t("p",[e._v("下面是如何移除当前节点的所有子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var element = document.getElementById('top');\nwhile (element.firstChild) {\n  element.removeChild(element.firstChild);\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("被移除的节点依然存在于内存之中，但不再是 DOM 的一部分。所以，一个节点移除以后，依然可以使用它，比如插入到另一个节点下面。")]),e._v(" "),t("p",[e._v("如果参数节点不是当前节点的子节点，removeChild方法将报错。")]),e._v(" "),t("h3",{attrs:{id:"_7-node-prototype-replacechild"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-node-prototype-replacechild"}},[e._v("#")]),e._v(" 7. Node.prototype.replaceChild()")]),e._v(" "),t("p",[e._v("replaceChild方法用于将一个新的节点，替换当前节点的某一个子节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var replacedNode = parentNode.replaceChild(newChild, oldChild);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("上面代码中，replaceChild方法接受两个参数，第一个参数newChild是用来替换的新节点，第二个参数oldChild是将要替换走的子节点。返回值是替换走的那个节点oldChild。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var divA = document.getElementById('divA');\nvar newSpan = document.createElement('span');\nnewSpan.textContent = 'Hello World!';\ndivA.parentNode.replaceChild(newSpan, divA);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("上面代码是如何将指定节点divA替换走。")]),e._v(" "),t("h3",{attrs:{id:"_8-node-prototype-contains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-node-prototype-contains"}},[e._v("#")]),e._v(" 8. Node.prototype.contains()")]),e._v(" "),t("p",[e._v("contains方法返回一个布尔值，表示参数节点是否满足以下三个条件之一。")]),e._v(" "),t("ul",[t("li",[e._v("参数节点为当前节点。")]),e._v(" "),t("li",[e._v("参数节点为当前节点的子节点。")]),e._v(" "),t("li",[e._v("参数节点为当前节点的后代节点。")])]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.body.contains(node)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("上面代码检查参数节点node，是否包含在当前文档之中。")]),e._v(" "),t("p",[e._v("注意，当前节点传入contains方法，返回true。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("nodeA.contains(nodeA) // true\nNode.prototype.compareDocumentPosition()\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("compareDocumentPosition方法的用法，与contains方法完全一致，返回一个六个比特位的二进制值，表示参数节点与当前节点的关系。")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("二进制值")]),e._v(" "),t("th",[e._v("十进制值")]),e._v(" "),t("th",[e._v("含义")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("000000")]),e._v(" "),t("td",[e._v("0")]),e._v(" "),t("td",[e._v("两个节点相同")])]),e._v(" "),t("tr",[t("td",[e._v("000001")]),e._v(" "),t("td",[e._v("1")]),e._v(" "),t("td",[e._v("两个节点不在同一个文档（即有一个节点不在当前文档)")])]),e._v(" "),t("tr",[t("td",[e._v("000010")]),e._v(" "),t("td",[e._v("2")]),e._v(" "),t("td",[e._v("参数节点在当前节点的前面")])]),e._v(" "),t("tr",[t("td",[e._v("000100")]),e._v(" "),t("td",[e._v("4")]),e._v(" "),t("td",[e._v("参数节点在当前节点的后面")])]),e._v(" "),t("tr",[t("td",[e._v("001000")]),e._v(" "),t("td",[e._v("8")]),e._v(" "),t("td",[e._v("参数节点包含当前节点")])]),e._v(" "),t("tr",[t("td",[e._v("010000")]),e._v(" "),t("td",[e._v("16")]),e._v(" "),t("td",[e._v("当前节点包含参数节点")])]),e._v(" "),t("tr",[t("td",[e._v("100000")]),e._v(" "),t("td",[e._v("32")]),e._v(" "),t("td",[e._v("浏览器内部使用")])])])]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// HTML 代码如下\n// <div id=\"mydiv\">\n//   <form><input id=\"test\" /></form>\n// </div>\n\nvar div = document.getElementById('mydiv');\nvar input = document.getElementById('test');\n\ndiv.compareDocumentPosition(input) // 20\ninput.compareDocumentPosition(div) // 10\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[e._v("上面代码中，节点div包含节点input（二进制010000），而且节点input在节点div的后面（二进制000100），所以第一个compareDocumentPosition方法返回20（二进制010100，即010000 + 000100），第二个compareDocumentPosition方法返回10（二进制001010）。")]),e._v(" "),t("p",[e._v("由于compareDocumentPosition返回值的含义，定义在每一个比特位上，所以如果要检查某一种特定的含义，就需要使用比特位运算符。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var head = document.head;\nvar body = document.body;\nif (head.compareDocumentPosition(body) & 4) {\n  console.log('文档结构正确');\n} else {\n  console.log('<body> 不能在 <head> 前面');\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("上面代码中，compareDocumentPosition的返回值与4（又称掩码）进行与运算（&），得到一个布尔值，表示"),t("code",[e._v("<head>")]),e._v("是否在"),t("code",[e._v("<body>")]),e._v("前面。")]),e._v(" "),t("h3",{attrs:{id:"_9-node-prototype-isequalnode-node-prototype-issamenode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-node-prototype-isequalnode-node-prototype-issamenode"}},[e._v("#")]),e._v(" 9. Node.prototype.isEqualNode()，Node.prototype.isSameNode()")]),e._v(" "),t("p",[e._v("isEqualNode方法返回一个布尔值，用于检查两个节点是否相等。所谓相等的节点，指的是两个节点的类型相同、属性相同、子节点相同。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var p1 = document.createElement('p');\nvar p2 = document.createElement('p');\n\np1.isEqualNode(p2) // true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("isSameNode方法返回一个布尔值，表示两个节点是否为同一个节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var p1 = document.createElement('p');\nvar p2 = document.createElement('p');\n\np1.isSameNode(p2) // false\np1.isSameNode(p1) // true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("h3",{attrs:{id:"_10-node-prototype-normalize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-node-prototype-normalize"}},[e._v("#")]),e._v(" 10. Node.prototype.normalize()")]),e._v(" "),t("p",[e._v("normalize方法用于清理当前节点内部的所有文本节点（text）。它会去除空的文本节点，并且将毗邻的文本节点合并成一个，也就是说不存在空的文本节点，以及毗邻的文本节点。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var wrapper = document.createElement('div');\n\nwrapper.appendChild(document.createTextNode('Part 1 '));\nwrapper.appendChild(document.createTextNode('Part 2 '));\n\nwrapper.childNodes.length // 2\nwrapper.normalize();\nwrapper.childNodes.length // 1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[e._v("上面代码使用normalize方法之前，wrapper节点有两个毗邻的文本子节点。使用normalize方法之后，两个文本子节点被合并成一个。")]),e._v(" "),t("p",[e._v("该方法是Text.splitText的逆方法，可以查看《Text 节点对象》一章，了解更多内容。")]),e._v(" "),t("h3",{attrs:{id:"_11-node-prototype-getrootnode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-node-prototype-getrootnode"}},[e._v("#")]),e._v(" 11. Node.prototype.getRootNode()")]),e._v(" "),t("p",[e._v("getRootNode()方法返回当前节点所在文档的根节点document，与ownerDocument属性的作用相同。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.body.firstChild.getRootNode() === document\n// true\ndocument.body.firstChild.getRootNode() === document.body.firstChild.ownerDocument\n// true\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[e._v("该方法可用于document节点自身，这一点与document.ownerDocument不同。")]),e._v(" "),t("div",{staticClass:"language-node line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("document.getRootNode() // document\ndocument.ownerDocument // null\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);