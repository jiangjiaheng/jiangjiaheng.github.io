(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{478:function(s,a,e){"use strict";e.r(a);var n=e(17),r=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"regexp对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regexp对象"}},[s._v("#")]),s._v(" RegExp对象")]),s._v(" "),e("h2",{attrs:{id:"概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),e("p",[s._v("新建正则表达式有两种方法。一种是使用字面量，以斜杠表示开始和结束。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var regex = /xyz/;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("另一种是使用RegExp构造函数。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var regex = new RegExp('xyz');\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("RegExp构造函数还可以接受第二个参数，表示修饰。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var regex = new RegExp('xyz', 'i');\n// 等价于\nvar regex = /xyz/i;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"实例属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[s._v("#")]),s._v(" 实例属性")]),s._v(" "),e("h3",{attrs:{id:"_1-修饰符相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-修饰符相关"}},[s._v("#")]),s._v(" 1. 修饰符相关")]),s._v(" "),e("ul",[e("li",[s._v("RegExp.prototype.ignoreCase：返回一个布尔值，表示是否设置了i修饰符。")]),s._v(" "),e("li",[s._v("RegExp.prototype.global：返回一个布尔值，表示是否设置了g修饰符。")]),s._v(" "),e("li",[s._v("RegExp.prototype.multiline：返回一个布尔值，表示是否设置了m修饰符。")]),s._v(" "),e("li",[s._v("RegExp.prototype.flags：返回一个字符串，包含了已经设置的所有修饰符，按字母排序。")])]),s._v(" "),e("p",[s._v("上面四个属性都是只读的。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var r = /abc/igm;\n\nr.ignoreCase // true\nr.global // true\nr.multiline // true\nr.flags // 'gim'\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"_2-修饰符无关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-修饰符无关"}},[s._v("#")]),s._v(" 2. 修饰符无关")]),s._v(" "),e("ul",[e("li",[s._v("RegExp.prototype.lastIndex：返回一个整数，表示下一次开始搜索的位置。该属性可读写，但是只在进行连续搜索时有意义，详细介绍请看后文。")]),s._v(" "),e("li",[s._v("RegExp.prototype.source：返回正则表达式的字符串形式（不包括反斜杠），该属性只读。")])]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var r = /abc/igm;\n\nr.lastIndex // 0\nr.source // "abc"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"实例方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[s._v("#")]),s._v(" 实例方法")]),s._v(" "),e("h3",{attrs:{id:"_1-test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-test"}},[s._v("#")]),s._v(" 1. test")]),s._v(" "),e("p",[s._v("正则实例对象的test方法返回一个布尔值，表示当前模式是否能匹配参数字符串。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("/cat/.test('cats and dogs') // true\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("上面代码验证参数字符串之中是否包含cat，结果返回true。")]),s._v(" "),e("p",[s._v("如果正则表达式带有g修饰符，则每一次test方法都从上一次结束的位置开始向后匹配。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var r = /x/g;\nvar s = '_x_x';\n\nr.lastIndex // 0\nr.test(s) // true\n\nr.lastIndex // 2\nr.test(s) // true\n\nr.lastIndex // 4\nr.test(s) // false\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h3",{attrs:{id:"_2-exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-exec"}},[s._v("#")]),s._v(" 2. exec")]),s._v(" "),e("p",[s._v("正则实例对象的exec方法，用来返回匹配结果。如果发现匹配，就返回一个数组，成员是匹配成功的子字符串，否则返回null。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var s = '_x_x';\nvar r1 = /x/;\nvar r2 = /y/;\n\nr1.exec(s) // [\"x\"]\nr2.exec(s) // null\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[s._v("exec方法的返回数组还包含以下两个属性：")]),s._v(" "),e("ul",[e("li",[s._v("input：整个原字符串。")]),s._v(" "),e("li",[s._v("index：整个模式匹配成功的开始位置（从0开始计数）。")])]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var r = /a(b+)a/;\nvar arr = r.exec(\'_abbba_aba_\');\n\narr // ["abbba", "bbb"]\n\narr.index // 1\narr.input // "_abbba_aba_"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("如果正则表达式加上g修饰符，则可以使用多次exec方法，下一次搜索的位置从上一次匹配成功结束的位置开始。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var reg = /a/g;\nvar str = \'abc_abc_abc\'\n\nvar r1 = reg.exec(str);\nr1 // ["a"]\nr1.index // 0\nreg.lastIndex // 1\n\nvar r2 = reg.exec(str);\nr2 // ["a"]\nr2.index // 4\nreg.lastIndex // 5\n\nvar r3 = reg.exec(str);\nr3 // ["a"]\nr3.index // 8\nreg.lastIndex // 9\n\nvar r4 = reg.exec(str);\nr4 // null\nreg.lastIndex // 0\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br")])]),e("h2",{attrs:{id:"字符串相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串相关"}},[s._v("#")]),s._v(" 字符串相关")]),s._v(" "),e("h3",{attrs:{id:"_1-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-match"}},[s._v("#")]),s._v(" 1. match")]),s._v(" "),e("p",[s._v("字符串实例对象的match方法对字符串进行正则匹配，返回匹配结果。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var s = '_x_x';\nvar r1 = /x/;\nvar r2 = /y/;\n\ns.match(r1) // [\"x\"]\ns.match(r2) // null\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("h3",{attrs:{id:"_2-search"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-search"}},[s._v("#")]),s._v(" 2. search")]),s._v(" "),e("p",[s._v("字符串对象的search方法，返回第一个满足条件的匹配结果在整个字符串中的位置。如果没有任何匹配，则返回-1。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("'_x_x'.search(/x/)\n// 1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h3",{attrs:{id:"_3-replace"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-replace"}},[s._v("#")]),s._v(" 3. replace")]),s._v(" "),e("p",[s._v("字符串对象的replace方法可以替换匹配的值。它接受两个参数，第一个是正则表达式，表示搜索模式，第二个是替换的内容。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("str.replace(search, replacement)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("正则表达式如果不加g修饰符，就替换第一个匹配成功的值，否则替换所有匹配成功的值。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("'aaa'.replace('a', 'b') // \"baa\"\n'aaa'.replace(/a/, 'b') // \"baa\"\n'aaa'.replace(/a/g, 'b') // \"bbb\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("replace方法的一个应用，就是消除字符串首尾两端的空格。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var str = '  #id div.class  ';\n\nstr.replace(/^\\s+|\\s+$/g, '')\n// \"#id div.class\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("replace方法的第二个参数可以使用美元符号$，用来指代所替换的内容。")]),s._v(" "),e("ul",[e("li",[s._v("$&：匹配的子字符串。")]),s._v(" "),e("li",[s._v("$`：匹配结果前面的文本。")]),s._v(" "),e("li",[s._v("$'：匹配结果后面的文本。")]),s._v(" "),e("li",[s._v("$n：匹配成功的第n组内容，n是从1开始的自然数。")]),s._v(" "),e("li",[s._v("$$：指代美元符号$。")])]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("'hello world'.replace(/(\\w+)\\s(\\w+)/, '$2 $1')\n// \"world hello\"\n\n'abc'.replace('b', '[$`-$&-$\\']')\n// \"a[a-b-c]c\"\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("replace方法的第二个参数还可以是一个函数，将每一个匹配内容替换为函数返回值。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("'3 and 5'.replace(/[0-9]+/g, function (match) {\n  return 2 * match;\n})\n// \"6 and 10\"\n\nvar a = 'The quick brown fox jumped over the lazy dog.';\nvar pattern = /quick|brown|lazy/ig;\n\na.replace(pattern, function replacer(match) {\n  return match.toUpperCase();\n});\n// The QUICK BROWN fox jumped over the LAZY dog.\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h3",{attrs:{id:"_4-split"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-split"}},[s._v("#")]),s._v(" 4. split")]),s._v(" "),e("p",[s._v("字符串对象的split方法按照正则规则分割字符串，返回一个由分割后的各个部分组成的数组。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("str.split(separator, [limit])\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("该方法接受两个参数，第一个参数是正则表达式，表示分隔规则，第二个参数是返回数组的最大成员数。")]),s._v(" "),e("div",{staticClass:"language-re line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 非正则分隔\n'a,  b,c, d'.split(',')\n// [ 'a', '  b', 'c', ' d' ]\n\n// 正则分隔，去除多余的空格\n'a,  b,c, d'.split(/, */)\n// [ 'a', 'b', 'c', 'd' ]\n\n// 指定返回数组的最大成员\n'a,  b,c, d'.split(/, */, 2)\n[ 'a', 'b' ]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])])])}),[],!1,null,null,null);a.default=r.exports}}]);