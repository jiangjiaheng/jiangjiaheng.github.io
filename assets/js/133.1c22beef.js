(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{450:function(e,a,s){"use strict";s.r(a);var t=s(17),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"storage-接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#storage-接口"}},[e._v("#")]),e._v(" Storage 接口")]),e._v(" "),s("h2",{attrs:{id:"概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),s("p",[e._v("Storage 接口用于脚本在浏览器保存数据。两个对象部署了这个接口：window.sessionStorage和window.localStorage。")]),e._v(" "),s("p",[e._v("sessionStorage保存的数据用于浏览器的一次会话（session），当会话结束（通常是窗口关闭），数据被清空；localStorage保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。除了保存期限的长短不同，这两个对象的其他方面都一致。")]),e._v(" "),s("p",[e._v("保存的数据都以“键值对”的形式存在。也就是说，每一项数据都有一个键名和对应的值。所有的数据都是以文本格式保存。")]),e._v(" "),s("p",[e._v("这个接口很像 Cookie 的强化版，能够使用大得多的存储空间。目前，每个域名的存储上限视浏览器而定，Chrome 是 2.5MB，Firefox 和 Opera 是 5MB，IE 是 10MB。其中，Firefox 的存储空间由一级域名决定，而其他浏览器没有这个限制。也就是说，Firefox 中，a.example.com和b.example.com共享 5MB 的存储空间。另外，与 Cookie 一样，它们也受同域限制。某个网页存入的数据，只有同域下的网页才能读取，如果跨域操作会报错。")]),e._v(" "),s("h2",{attrs:{id:"属性和方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性和方法"}},[e._v("#")]),e._v(" 属性和方法")]),e._v(" "),s("p",[e._v("Storage 接口只有一个属性。")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("Storage.length")]),e._v("：返回保存的数据项个数。")])]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("window.localStorage.setItem('foo', 'a');\nwindow.localStorage.setItem('bar', 'b');\nwindow.localStorage.setItem('baz', 'c');\n\nwindow.localStorage.length // 3\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("该接口提供5个方法。")]),e._v(" "),s("h3",{attrs:{id:"_1-storage-setitem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-storage-setitem"}},[e._v("#")]),e._v(" 1. Storage.setItem()")]),e._v(" "),s("p",[e._v("Storage.setItem()方法用于存入数据。它接受两个参数，第一个是键名，第二个是保存的数据。如果键名已经存在，该方法会更新已有的键值。该方法没有返回值。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("window.sessionStorage.setItem('key', 'value');\nwindow.localStorage.setItem('key', 'value');\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("注意，Storage.setItem()两个参数都是字符串。如果不是字符串，会自动转成字符串，再存入浏览器。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("window.sessionStorage.setItem(3, { foo: 1 });\nwindow.sessionStorage.getItem('3') // \"[object Object]\"\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("上面代码中，setItem方法的两个参数都不是字符串，但是存入的值都是字符串。")]),e._v(" "),s("p",[e._v("如果储存空间已满，该方法会抛错。")]),e._v(" "),s("p",[e._v("写入不一定要用这个方法，直接赋值也是可以的。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// 下面三种写法等价\nwindow.localStorage.foo = '123';\nwindow.localStorage['foo'] = '123';\nwindow.localStorage.setItem('foo', '123');\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("h3",{attrs:{id:"_2-storage-getitem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-storage-getitem"}},[e._v("#")]),e._v(" 2. Storage.getItem()")]),e._v(" "),s("p",[e._v("Storage.getItem()方法用于读取数据。它只有一个参数，就是键名。如果键名不存在，该方法返回null。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("window.sessionStorage.getItem('key')\nwindow.localStorage.getItem('key')\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("键名应该是一个字符串，否则会被自动转为字符串。")]),e._v(" "),s("h3",{attrs:{id:"_3-storage-removeitem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-storage-removeitem"}},[e._v("#")]),e._v(" 3. Storage.removeItem()")]),e._v(" "),s("p",[e._v("Storage.removeItem()方法用于清除某个键名对应的键值。它接受键名作为参数，如果键名不存在，该方法不会做任何事情。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("sessionStorage.removeItem('key');\nlocalStorage.removeItem('key');\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"_4-storage-clear"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-storage-clear"}},[e._v("#")]),e._v(" 4. Storage.clear()")]),e._v(" "),s("p",[e._v("Storage.clear()方法用于清除所有保存的数据。该方法的返回值是undefined。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("window.sessionStorage.clear()\nwindow.localStorage.clear()\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h3",{attrs:{id:"_5-storage-key"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-storage-key"}},[e._v("#")]),e._v(" 5. Storage.key()")]),e._v(" "),s("p",[e._v("Storage.key()接受一个整数作为参数（从零开始），返回该位置对应的键值。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("window.sessionStorage.setItem('key', 'value');\nwindow.sessionStorage.key(0) // \"key\"\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("结合使用Storage.length属性和Storage.key()方法，可以遍历所有的键。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("for (var i = 0; i < window.localStorage.length; i++) {\n  console.log(localStorage.key(i));\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h2",{attrs:{id:"storage-事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#storage-事件"}},[e._v("#")]),e._v(" storage 事件")]),e._v(" "),s("p",[e._v("Storage 接口储存的数据发生变化时，会触发 storage 事件，可以指定这个事件的监听函数。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("window.addEventListener('storage', onStorageChange);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("监听函数接受一个event实例对象作为参数。这个实例对象继承了 StorageEvent 接口，有几个特有的属性，都是只读属性。")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("StorageEvent.key")]),e._v("：字符串，表示发生变动的键名。如果 storage 事件是由clear()方法引起，该属性返回null。")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("StorageEvent.newValue")]),e._v("：字符串，表示新的键值。如果 storage 事件是由clear()方法或删除该键值对引发的，该属性返回null。")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("StorageEvent.oldValue")]),e._v("：字符串，表示旧的键值。如果该键值对是新增的，该属性返回null。")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("StorageEvent.storageArea")]),e._v("：对象，返回键值对所在的整个对象。也说是说，可以从这个属性上面拿到当前域名储存的所有键值对。")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("StorageEvent.url")]),e._v("：字符串，表示原始触发 storage 事件的那个网页的网址。")])])]),e._v(" "),s("p",[e._v("下面是StorageEvent.key属性的例子。")]),e._v(" "),s("div",{staticClass:"language-bom line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function onStorageChange(e) {\n  console.log(e.key);\n}\n\nwindow.addEventListener('storage', onStorageChange);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("注意，该事件有一个很特别的地方，就是它不在导致数据变化的当前页面触发，而是在同一个域名的其他窗口触发。也就是说，如果浏览器只打开一个窗口，可能观察不到这个事件。比如同时打开多个窗口，当其中的一个窗口导致储存的数据发生改变时，只有在其他窗口才能观察到监听函数的执行。可以通过这种机制，实现多个窗口之间的通信。")])])}),[],!1,null,null,null);a.default=r.exports}}]);